{
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "/2024/02/04/troubleshooting-express-no-response",
          "metadata": {
            "permalink": "/blog/2024/02/04/troubleshooting-express-no-response",
            "source": "@site/blog/2024-02-04-troubleshooting-express-no-response.md",
            "title": "[TroubleShooting] express가 응답을 보내지 않았다. 왜..?",
            "description": "에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !",
            "date": "2024-02-04T00:00:00.000Z",
            "formattedDate": "February 4, 2024",
            "tags": [
              {
                "label": "troubleshooting",
                "permalink": "/blog/tags/troubleshooting"
              },
              {
                "label": "express",
                "permalink": "/blog/tags/express"
              },
              {
                "label": "nginx",
                "permalink": "/blog/tags/nginx"
              }
            ],
            "readingTime": 6.91,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "yuseonLim",
                "title": "BackEnd Engineer",
                "url": "https://github.com/devyuseon",
                "imageURL": "https://avatars.githubusercontent.com/u/67352902?v=4",
                "key": "yuseonLim"
              }
            ],
            "frontMatter": {
              "title": "[TroubleShooting] express가 응답을 보내지 않았다. 왜..?",
              "description": "에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !",
              "authors": "yuseonLim",
              "tags": [
                "troubleshooting",
                "express",
                "nginx"
              ],
              "hide_table_of_contents": false
            },
            "unlisted": false,
            "nextItem": {
              "title": "오픈소스 첫 기여 ✨",
              "permalink": "/blog/2024/01/29/first-opensearch-contribute-docker-compose"
            }
          },
          "content": "## 문제 상황\n\n문제 상황이 무엇인지 설명하기 전에, 우리 서비스는 파일을 `등록` 하는 기능이 있고, 똑같은 파일을 중복으로 등록할 수 없다. 중복 등록을 시도할 경우엔 메세지가 뜨며 등록이 안된다.\n\n그런데 사용자로부터 이런 연락을 받았다.\n\n> 파일을 업로드 하고, `등록` 버튼을 눌렀는데 **등록에 실패** 했다는 메시지가 떴습니다.<br/>\n> 그래서 다시 등록을 시도했는데, **중복 등록** 이라고 하며 등록이 되지 않았습니다. <br/>\n> 확인해보니 처음에 등록한 리포트가 잘 등록이 되어 있네요?\n\n그러니까, 실패했다는 메세지가 떴는데 실제론 성공했다는 거다.\n\n<!-- truncate -->\n\n## 증상 파악\n\n![](../static/img/post-img/diagram1.png)\n\n등록 기능 프로세스는 이렇다. express에서 요청을 전달하고, spring에서 등록 과정을 수행하고, 그것을 다시 express에 넘기고, express는 클라이언트에 완료를 전달한다.\n\n로그를 살펴보니, **express가 client로 등록 완료 전달** 하는 부분 외에는 모두 success, 200으로 에러 없이 잘 수행되었다.\n\n![](../static/img/post-img/diagram2.png)\n\n**express가 client로 등록 완료 전달** 하는 부분은 ? 로 남았다. 이런 로그를 발견했기 때문이다.\n\n```\n[시간] \"POST /api/*** HTTP/1.1\" - - \"출처\" \"클라이언트 정보\" - - ms\n```\n\n이 로그는 express의 [morgan](https://expressjs.com/en/resources/middleware/morgan.html) 미들웨어가 남긴 로그이다. 원래라면 아래처럼 응답시간, 응답크기, 걸린시간이 표시 되어야 한다.\n\n```\n[시간] \"POST /api/*** HTTP/1.1\" 200 49 \"출처\" \"클라이언트 정보\" - 317.922 ms\n```\n\n뭔가 응답이 정상적으로 처리되지 않은 듯 했다.\n\n그러나 미스테리인 점은 .. express가 `await` 으로 spring의 응답을 기다리고, 그 뒤에 성공했을땐 로그를 남기게 되어 있는데, 그 로그는 남았다는 것이다.\n\nexpress에 에러는 없었고, spring에도 에러는 없었는데, 클라이언트에 응답 전송만 정상적으로 되지 않았다.\n\n찾아보니, 위 -- 로 처리된 로그는 express가 응답 자체를 하지 않았을 때 일어나는 일이라고 한다.\n\n> https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging > https://github.com/expressjs/morgan/issues/121\n\n위 링크에서 추정한 원인은 다음과 같다.\n\n:::tip[아마도..]\n\nresponse를 보내기 전에 TCP 연결이 끊어진 듯!\n\n:::\n\n로그 시간을 파악해보니 클라이언트 요청 ~ spring의 응답 까지는 1분 5초 내외로 소요되었다.\n\n그렇다면 어디서 TCP 연결을 해제했을까?\n\n## 원인 파악\n\n내가 의심한 것들은 다음과 같다.\n\n- axios timeout\n- node.js timeout\n- OS의 TCP timeout\n- L4 스위치 timeout\n- Nginx timeout\n\n### axios timeout\n\n따로 설정한 것이 없다. [default는 no timeout](https://github.com/axios/axios/blob/main/README.md#request-config) 이다.\n\n### node.js timeout\n\n노드13 버전 이후로는 no timeout이다.\n\n노드8 버전을 쓰는 우리 프로젝트는 120s가 기본으로 설정 되어 있다. (처음알았다 ..)\n\n> https://nodejs.org/api/http.html#servertimeout\n\n그러나 2분 보다 오래 걸리진 않았으므로 이것도 아니다.\n\n### OS의 TCP timeout\n\n```\ncat /proc/sys/net/ipv4/tcp_keepalive_time\n```\n\n- tcp_keepalive : tcp 연결이 되고 나서 얼마나 그 연결을 지속하는지\n\n7200(2시간) 으로 널널했다.\n\n### L4 스위치\n\nL4 에서도 뭔가 타임아웃이 걸려있는것은 아닐까..? 하고 해당 사항을 인프라팀에 문의했는데\n\n아니다. (~의심해서 죄송합니다...~)\n\n전에도 L4 설정 문제때문에 안된 기능이 있어서, 생각났었는데 .. 어쨌든 이게 문제는 아니였다.\n\n### Nginx timeout\n\n```nginx title=\"/etc/nginx/nginx.conf\"\nkeepalive_timeout 65; // default 75\n```\n\n여기였다 !!\n\nkeepalive_timeout이 65초로 설정 되어 있었다. 지금껏 Nginx 설정을 바꿀 일이 없어서 자세히 들여다 보지 않아서 몰랐다.\n\n이 사실을 알고 난 뒤 nginx 에러 로그를 보니 (로그 경로는 nginx.conf 에 있다.)\n\n```text title=\"error.log\"\n[error] upstream timed out (110: Connection timed out) while reading response header from upstream .. 생략\n```\n\nconnection timeout 에러 로그가 찍혔다.\n\nspring이 express로 응답을 보내, express가 client에 응답하기 전에 client와 express간의 연결이 끊어져 client가 응답을 받지 못한 것이다.\n\n## 해결\n\n해결 방법으로는 이런 것들이 있겠다.\n\n- timeout 늘리기\n- upstream인 spring 서버의 처리 성능 향상하기 (best)\n\n그리고 nginx 로그는 도커 컨테이너 안에 있어서, 컨테이너가 내려가면 로그 파일이 날아가 볼 수 없다.\n도커 컨테이너에서 쌓은 로그는 volume으로 연결해 host에도 쌓게 해놨다. nginx 로그도 표준 출력으로 내보내 (/dev/stdout 으로 심볼릭 링크 걸기) 도커가 로그를 수집하게 하거나 nginx 로그를 volume으로 설정해 보관 할 필요가 있다.\n\n일단 timeout을 늘려서 급한 불을 끄고, spring 서버의 처리 성능을 높일 방법을 생각 해 볼 것이다.\n\n적고보니 별일 아닌 듯 하지만,, 의미 있었던 과정이였다.\n\n이 이슈로 인해 우리 서비스의 어떤 부분에 timeout이 얼만큼 걸려있는지 확인 할 수 있었고, 로그도 좀 더 보충할 수 있었다. 다음에 이러한 일이 발생하면 이 경험으로 인해 원인 파악을 조금은 빨리 할 수 있을까 기대해보며 글을 마친다."
        },
        {
          "id": "/2024/01/29/first-opensearch-contribute-docker-compose",
          "metadata": {
            "permalink": "/blog/2024/01/29/first-opensearch-contribute-docker-compose",
            "source": "@site/blog/2024-01-29-first-opensearch-contribute-docker-compose.md",
            "title": "오픈소스 첫 기여 ✨",
            "description": "에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !",
            "date": "2024-01-29T00:00:00.000Z",
            "formattedDate": "January 29, 2024",
            "tags": [
              {
                "label": "docker",
                "permalink": "/blog/tags/docker"
              },
              {
                "label": "opensource-contributions",
                "permalink": "/blog/tags/opensource-contributions"
              }
            ],
            "readingTime": 1.925,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "yuseonLim",
                "title": "BackEnd Engineer",
                "url": "https://github.com/devyuseon",
                "imageURL": "https://avatars.githubusercontent.com/u/67352902?v=4",
                "key": "yuseonLim"
              }
            ],
            "frontMatter": {
              "title": "오픈소스 첫 기여 ✨",
              "description": "에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !",
              "authors": "yuseonLim",
              "tags": [
                "docker",
                "opensource-contributions"
              ],
              "hide_table_of_contents": false
            },
            "unlisted": false,
            "prevItem": {
              "title": "[TroubleShooting] express가 응답을 보내지 않았다. 왜..?",
              "permalink": "/blog/2024/02/04/troubleshooting-express-no-response"
            },
            "nextItem": {
              "title": "[Java] 에러 메시지, Stacktrace가 생략되는 문제",
              "permalink": "/blog/2024/01/02/java-no-stacktrace"
            }
          },
          "content": "비록 공식문서의 오류를 고치는 일이였지만,\n\n처음으로 오픈소스에 기여했고 무려 Docker 문서 이다!!\n\n머지 되었을때는 정말 뿌듯했고 이슈를 생성하고 PR을 날리는 과정도 재밌었다.\n\n<!-- truncate -->\n\n## 문제 발견, 이슈 생성\n\n![](../static/img/post-img/20240205204509.png)\n\n문서에 틀린 부분을 발견하고, 이슈를 생성했다.\n\n수정이 필요한게 맞다면 내가 작업해도 되는지 물어봤다.\n\n![](../static/img/post-img/20240205204536.png)\n\nassgin 해주셨고, 문서 위치가 바뀌었으니 compose-spec 레포지토리에서 PR을 해달라는 친절한 가이드까지 주셨다.\n\n## Pull Request 생성하기\n\n먼저 compose-spec을 fork하고, 소스코드 수정 후 commit 했다.\n\n![](../static/img/post-img/20240205204610.png)\n\n다시 upstream으로 와서 pull request를 생성했다.\n\n![](../static/img/post-img/20240205204624.png)\n\n이건 내가 CONTRIBUTING.md를 꼼꼼히 보지 않아 생긴 일이다. ㅜㅜ\n\n그냥 커밋할때 계정 정보를 확인해달라는 말인 줄 알았는데,\n\n커밋 메세지에 sign-off를 포함하지 않으면 DCO check에 실패 하면서 오류가 난다.\n\n친절히 알려주셔서 커밋 메세지 수정 후 강제 푸시했고,\n\n이후 빌드에 한 번 실패해 한가지 수정을 더 하고 머지되었다.\n\n![](../static/img/post-img/20240205204639.png)\n\n![](../static/img/post-img/20240205204646.png)\n\n이렇게 오픈소스 기여에 작지만 위대한 첫 걸음을 내딛었다.\n\n앞으로도 문서 뿐만 아니라 코드 레벨까지 .. 더 많은 오픈소스에 기여할 수 있게 되면 좋겠다."
        },
        {
          "id": "/2024/01/02/java-no-stacktrace",
          "metadata": {
            "permalink": "/blog/2024/01/02/java-no-stacktrace",
            "source": "@site/blog/2024-01-02-java-no-stacktrace.md",
            "title": "[Java] 에러 메시지, Stacktrace가 생략되는 문제",
            "description": "NullPointerException의 에러 메시지가 빈 채로 출력된다",
            "date": "2024-01-02T00:00:00.000Z",
            "formattedDate": "January 2, 2024",
            "tags": [
              {
                "label": "java",
                "permalink": "/blog/tags/java"
              }
            ],
            "readingTime": 4.155,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "yuseonLim",
                "title": "BackEnd Engineer",
                "url": "https://github.com/devyuseon",
                "imageURL": "https://avatars.githubusercontent.com/u/67352902?v=4",
                "key": "yuseonLim"
              }
            ],
            "frontMatter": {
              "title": "[Java] 에러 메시지, Stacktrace가 생략되는 문제",
              "description": "NullPointerException의 에러 메시지가 빈 채로 출력된다",
              "authors": "yuseonLim",
              "tags": [
                "java"
              ]
            },
            "unlisted": false,
            "prevItem": {
              "title": "오픈소스 첫 기여 ✨",
              "permalink": "/blog/2024/01/29/first-opensearch-contribute-docker-compose"
            }
          },
          "content": "## 문제 상황\n\n테스트 스크립트를 배포시에 실행하게 되어 있는데, 해당 스클립트는 같은 api를 여러 case로 몇십번 호출한다.\n\n최초 실행시에는 성공하고,\n\n두번째 이후부턴 실패한다.\n\n<!-- truncate -->\n\n지금까지는 서비스 실행시 한번만 실행했어서 발견을 못 한 문제였다.\n\n에러가 발생한 지점은 여기였다.\n\n```java\ncatch (Exception e) {\n    String msg = e.getMessage(); // errMsg: null\n    if (msg.equalsIgnoreCase(\"XXX\")) { // NullPointerException 발생!\n        //\n    }\n}\n```\n\ntry ~ catch 문에서 에러 메세지를 가져와 어떤 에러 메시지인지 판단하려고 할 때, `e.getMessage()` 결과가 **null** 이 되어 catch 구문에서 다시 에러가 발생하는 것이였다.\n\n로직을 살펴보니 특정 case엔 무조건 try쪽에서 NPE가 발생하고, catch문으로 들어오게 되어있었다.\n\n근데 왜 최초 실행시엔 msg가 null이 아닌가..???!!!\n\n해당 현상을 재현한 뒤에 최초 실행 / 이후 실행에 대한 에러를 출력해 보았다.\n\n**최초**\n\n```\nclass java.lang.NullPointerException: Cannot invoke \"Object.toString()\" because of \"java.util.Map.get(Object) is null\n// 굉장히 긴 StackTrace\n```\n\n**두번째~**\n\n```java\nclass java.lang.NullPointerException: null\n```\n\n나는 내가 로직 어딘가에 NPE가 발생하는 원인을 놓친줄 알고 며칠을 삽질했는데, 스택오버플로우에서 이 글을 발견했다.\n\n> https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace\n\n관련해서 간략하게 조사해 보았다.\n\n## JVM Stacktrace 생략\n\n[JDK5 릴리즈 노트](https://www.oracle.com/java/technologies/javase/release-notes-introduction.html)를 보면 Exception이 반복적으로 발생할 때, 컴파일러는 StackTrace를 출력하는것을 멈춘다고 한다.\n\n이것은 JVM의 JIT컴파일러의 C2컴파일러의 기본 최적화 옵션 이라고 한다.\n\n[OpenJDK의 소스 코드](https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L528)를 보면 다음 다섯가지 Exception에 대해 최적화 옵션이 적용된다.\n\n:::info\n\n**Stacktrace 생략 최적화 옵션 적용되는 Exception**\n\n- NullPointerException\n- ArithmeticException\n- ArrayIndexOutOfBoundsException\n- ClassCastException\n- ArrayStoreException\n\n:::\n\n![](../static/img/post-img/20240205210954.png)\n\n최적화 옵션을 비활성화 하려면 아래 JVM 옵션을 추가해 주면 된다.\n\n```\n-XX:-OmitStackTraceInFastThrow\n```\n\n하지만 이는 성능 최적화를 위한 옵션으로, 해당 Exception이 반복적으로 일어나지 않게끔 처리 하는것이 올바른 방향 일 것이다.\n\nException 처리에 대한 최적화를 하는 이유가 궁금해서 찾아보았다.\n\nJava에서 Exception을 던지는 비용은 꽤 비싸다고 한다. Exception이 발생하면 해당 예외가 어디서 발생했는지 추적하며 정보를 수집하고 Stack Trace를 생성한다. 이를 계산하는데에도 시간이 꽤 걸린.\n\n또, 예외 객체를 새로 생성하고 초기화 하는 과정이 반복되기 때문에 좋지 않다. 그리고 Exception이 발생하면 그것이 어떤 예외인지 적절한 예외 핸들러를 찾아 리턴해줘야 하는데, 예외 핸들러를 찾는 과정 또한 오래 걸린다.\n\n프로젝트를 할 때도, 적절한 예외 상황에 Custom Exception을 던지곤 했는데, 이게 맞는 방법인지 생각해볼 필요가 있는 듯 하다.\n\n그리고 스택 추적이 필요하지 않은 경우라면 override를 통해 trace를 담지 않도록 하는 방법도 좋겠다."
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "/2024/02/04/troubleshooting-express-no-response",
            "/2024/01/29/first-opensearch-contribute-docker-compose",
            "/2024/01/02/java-no-stacktrace"
          ],
          "metadata": {
            "permalink": "/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 3,
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        }
      ],
      "blogTags": {
        "/blog/tags/troubleshooting": {
          "label": "troubleshooting",
          "items": [
            "/2024/02/04/troubleshooting-express-no-response"
          ],
          "permalink": "/blog/tags/troubleshooting",
          "pages": [
            {
              "items": [
                "/2024/02/04/troubleshooting-express-no-response"
              ],
              "metadata": {
                "permalink": "/blog/tags/troubleshooting",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/express": {
          "label": "express",
          "items": [
            "/2024/02/04/troubleshooting-express-no-response"
          ],
          "permalink": "/blog/tags/express",
          "pages": [
            {
              "items": [
                "/2024/02/04/troubleshooting-express-no-response"
              ],
              "metadata": {
                "permalink": "/blog/tags/express",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/nginx": {
          "label": "nginx",
          "items": [
            "/2024/02/04/troubleshooting-express-no-response"
          ],
          "permalink": "/blog/tags/nginx",
          "pages": [
            {
              "items": [
                "/2024/02/04/troubleshooting-express-no-response"
              ],
              "metadata": {
                "permalink": "/blog/tags/nginx",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/docker": {
          "label": "docker",
          "items": [
            "/2024/01/29/first-opensearch-contribute-docker-compose"
          ],
          "permalink": "/blog/tags/docker",
          "pages": [
            {
              "items": [
                "/2024/01/29/first-opensearch-contribute-docker-compose"
              ],
              "metadata": {
                "permalink": "/blog/tags/docker",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/opensource-contributions": {
          "label": "opensource-contributions",
          "items": [
            "/2024/01/29/first-opensearch-contribute-docker-compose"
          ],
          "permalink": "/blog/tags/opensource-contributions",
          "pages": [
            {
              "items": [
                "/2024/01/29/first-opensearch-contribute-docker-compose"
              ],
              "metadata": {
                "permalink": "/blog/tags/opensource-contributions",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/java": {
          "label": "java",
          "items": [
            "/2024/01/02/java-no-stacktrace"
          ],
          "permalink": "/blog/tags/java",
          "pages": [
            {
              "items": [
                "/2024/01/02/java-no-stacktrace"
              ],
              "metadata": {
                "permalink": "/blog/tags/java",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        }
      },
      "blogTagsListPath": "/blog/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        },
        "unlisted": false
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-plugin-google-gtag": {},
  "docusaurus-theme-classic": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}