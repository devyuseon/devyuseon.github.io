<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://devyuseon.github.io/</id>
    <title>뉴뉴의 메모장 Blog</title>
    <updated>2024-02-04T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://devyuseon.github.io/"/>
    <subtitle>뉴뉴의 메모장 Blog</subtitle>
    <icon>https://devyuseon.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[[TroubleShooting] express가 응답을 보내지 않았다. 왜..?]]></title>
        <id>https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response</id>
        <link href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response"/>
        <updated>2024-02-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="문제 상황에 대한 직접 링크" title="문제 상황에 대한 직접 링크">​</a></h2>
<p>문제 상황이 무엇인지 설명하기 전에, 우리 서비스는 파일을 <code>등록</code> 하는 기능이 있고, 똑같은 파일을 중복으로 등록할 수 없다. 중복 등록을 시도할 경우엔 메세지가 뜨며 등록이 안된다.</p>
<p>그런데 사용자로부터 이런 연락을 받았다.</p>
<blockquote>
<p>파일을 업로드 하고, <code>등록</code> 버튼을 눌렀는데 <strong>등록에 실패</strong> 했다는 메시지가 떴습니다.<br>
그래서 다시 등록을 시도했는데, <strong>중복 등록</strong> 이라고 하며 등록이 되지 않았습니다. <br>
확인해보니 처음에 등록한 리포트가 잘 등록이 되어 있네요?</p>
</blockquote>
<p>그러니까, 실패했다는 메세지가 떴는데 실제론 성공했다는 거다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="증상-파악">증상 파악<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#%EC%A6%9D%EC%83%81-%ED%8C%8C%EC%95%85" class="hash-link" aria-label="증상 파악에 대한 직접 링크" title="증상 파악에 대한 직접 링��크">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/diagram1-a15ada59da32d02e605b9bbf0305a1fa.png" width="1469" height="287" class="img_ev3q"></p>
<p>등록 기능 프로세스는 이렇다. express에서 요청을 전달하고, spring에서 등록 과정을 수행하고, 그것을 다시 express에 넘기고, express는 클라이언트에 완료를 전달한다.</p>
<p>로그를 살펴보니, <strong>express가 client로 등록 완료 전달</strong> 하는 부분 외에는 모두 success, 200으로 에러 없이 잘 수행되었다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/diagram2-e6f4ff2dbd839a5d213a07cdb152183e.png" width="1469" height="287" class="img_ev3q"></p>
<p><strong>express가 client로 등록 완료 전달</strong> 하는 부분은 ? 로 남았다. 이런 로그를 발견했기 때문이다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[시간] "POST /api/*** HTTP/1.1" - - "출처" "클라이언트 정보" - - ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 로그는 express의 <a href="https://expressjs.com/en/resources/middleware/morgan.html" target="_blank" rel="noopener noreferrer">morgan</a> 미들웨어가 남긴 로그이다. 원래라면 아래처럼 응답시간, 응답크기, 걸린시간이 표시 되어야 한다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[시간] "POST /api/*** HTTP/1.1" 200 49 "출처" "클라이언트 정보" - 317.922 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>뭔가 응답이 정상적으로 처리되지 않은 듯 했다.</p>
<p>그러나 미스테리인 점은 .. express가 <code>await</code> 으로 spring의 응답을 기다리고, 그 뒤에 성공했을땐 로그를 남기게 되어 있는데, 그 로그는 남았다는 것이다.</p>
<p>express에 에러는 없었고, spring에도 에러는 없었는데, 클라이언트에 응답 전송만 정상적으로 되지 않았다.</p>
<p>찾아보니, 위 -- 로 처리된 로그는 express가 응답 자체를 하지 않았을 때 일어나는 일이라고 한다.</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging</a>
<a href="https://github.com/expressjs/morgan/issues/121" target="_blank" rel="noopener noreferrer">https://github.com/expressjs/morgan/issues/121</a></p>
</blockquote>
<p>위 링크에서 추정한 원인은 다음과 같다.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>아마도..</div><div class="admonitionContent_BuS1"><p>response를 보내기 전에 TCP 연결이 끊어진 듯!</p></div></div>
<p>로그 시간을 파악해보니 클라이언트 요청 ~ spring의 응답 까지는 1분 5초 내외로 소요되었다.</p>
<p>그렇다면 어디서 TCP 연결을 해제했을까?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="원인-파악">원인 파악<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#%EC%9B%90%EC%9D%B8-%ED%8C%8C%EC%95%85" class="hash-link" aria-label="원인 파악에 대한 직접 링크" title="원인 파악에 대한 직접 링크">​</a></h2>
<p>내가 의심한 것들은 다음과 같다.</p>
<ul>
<li>axios timeout</li>
<li>node.js timeout</li>
<li>OS의 TCP timeout</li>
<li>L4 스위치 timeout</li>
<li>Nginx timeout</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="axios-timeout">axios timeout<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#axios-timeout" class="hash-link" aria-label="axios timeout에 대한 직접 링크" title="axios timeout에 대한 직접 링크">​</a></h3>
<p>따로 설정한 것이 없다. <a href="https://github.com/axios/axios/blob/main/README.md#request-config" target="_blank" rel="noopener noreferrer">default는 no timeout</a> 이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nodejs-timeout">node.js timeout<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#nodejs-timeout" class="hash-link" aria-label="node.js timeout에 대한 직접 링크" title="node.js timeout에 대한 직접 링크">​</a></h3>
<p>노드13 버전 이후로는 no timeout이다.</p>
<p>노드8 버전을 쓰는 우리 프로젝트는 120s가 기본으로 설정 되어 있다. (처음알았다 ..)</p>
<blockquote>
<p><a href="https://nodejs.org/api/http.html#servertimeout" target="_blank" rel="noopener noreferrer">https://nodejs.org/api/http.html#servertimeout</a></p>
</blockquote>
<p>그러나 2분 보다 오래 걸리진 않았으므로 이것도 아니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="os의-tcp-timeout">OS의 TCP timeout<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#os%EC%9D%98-tcp-timeout" class="hash-link" aria-label="OS의 TCP timeout에 대한 직접 링크" title="OS의 TCP timeout에 대한 직접 링크">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cat /proc/sys/net/ipv4/tcp_keepalive_time</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>tcp_keepalive : tcp 연결이 되고 나서 얼마나 그 연결을 지속하는지</li>
</ul>
<p>7200(2시간) 으로 널널했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="l4-스위치">L4 스위치<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#l4-%EC%8A%A4%EC%9C%84%EC%B9%98" class="hash-link" aria-label="L4 스위치에 대한 직접 링크" title="L4 스위치에 대한 직접 링크">​</a></h3>
<p>L4 에서도 뭔가 타임아웃이 걸려있는것은 아닐까..? 하고 해당 사항을 인프라팀에 문의했는데</p>
<p>아니다. (<del>의심해서 죄송합니다...</del>)</p>
<p>전에도 L4 설정 문제때문에 안된 기능이 있어서, 생각났었는데 .. 어쨌든 이게 문제는 아니였다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nginx-timeout">Nginx timeout<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#nginx-timeout" class="hash-link" aria-label="Nginx timeout에 대한 직접 링크" title="Nginx timeout에 대한 직접 링크">​</a></h3>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">/etc/nginx/nginx.conf</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">keepalive_timeout </span><span class="token number" style="color:#36acaa">65</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// default 75</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>여기였다 !!</p>
<p>keepalive_timeout이 65초로 설정 되어 있었다. 지금껏 Nginx 설정을 바꿀 일이 없어서 자세히 들여다 보지 않아서 몰랐다.</p>
<p>이 사실을 알고 난 뒤 nginx 에러 로그를 보니 (로그 경로는 nginx.conf 에 있다.)</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_Ktv7">error.log</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[error] upstream timed out (110: Connection timed out) while reading response header from upstream .. 생략</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>connection timeout 에러 로그가 찍혔다.</p>
<p>spring이 express로 응답을 보내, express가 client에 응답하기 전에 client와 express간의 연결이 끊어져 client가 응답을 받지 못한 것이다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결">해결<a href="https://devyuseon.github.io/2024/02/04/troubleshooting-express-no-response#%ED%95%B4%EA%B2%B0" class="hash-link" aria-label="해결에 대한 직접 링크" title="해결에 대한 직접 링크">​</a></h2>
<p>해결 방법으로는 이런 것들이 있겠다.</p>
<ul>
<li>timeout 늘리기</li>
<li>upstream인 spring 서버의 처리 성능 향상하기 (best)</li>
</ul>
<p>그리고 nginx 로그는 도커 컨테이너 안에 있어서, 컨테이너가 내려가면 로그 파일이 날아가 볼 수 없다.
도커 컨테이너에서 쌓은 로그는 volume으로 연결해 host에도 쌓게 해놨다. nginx 로그도 표준 출력으로 내보내 (/dev/stdout 으로 심볼릭 링크 걸기) 도커가 로그를 수집하게 하거나 nginx 로그를 volume으로 설정해 보관 할 필요가 있다.</p>
<p>일단 timeout을 늘려서 급한 불을 끄고, spring 서버의 처리 성능을 높일 방법을 생각 해 볼 것이다.</p>
<p>적고보니 별일 아닌 듯 하지만,, 의미 있었던 과정이였다.</p>
<p>이 이슈로 인해 우리 서비스의 어떤 부분에 timeout이 얼만큼 걸려있는지 확인 할 수 있었고, 로그도 좀 더 보충할 수 있었다. 다음에 이러한 일이 발생하면 이 경험으로 인해 원인 파악을 조금은 빨리 할 수 있을까 기대해보며 글을 마친다.</p>]]></content>
        <author>
            <name>yuseonLim</name>
            <uri>https://github.com/devyuseon</uri>
        </author>
        <category label="troubleshooting" term="troubleshooting"/>
        <category label="express" term="express"/>
        <category label="nginx" term="nginx"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[오픈소스 첫 기여 ✨]]></title>
        <id>https://devyuseon.github.io/2024/01/29/first-opensearch-contribute-docker-compose</id>
        <link href="https://devyuseon.github.io/2024/01/29/first-opensearch-contribute-docker-compose"/>
        <updated>2024-01-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !]]></summary>
        <content type="html"><![CDATA[<p>비록 공식문서의 오류를 고치는 일이였지만,</p>
<p>처음으로 오픈소스에 기여했고 무려 Docker 문서 이다!!</p>
<p>머지 되었을때는 정말 뿌듯했고 이슈를 생성하고 PR을 날리는 과정도 재밌었다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204509-f2e74099202853e823cb78732f5ca801.png" width="1280" height="1272" class="img_ev3q"></p>
<p>문서에 틀린 부분을 발견하고, 이슈를 생성했다.</p>
<p>수정이 필요한게 맞다면 내가 작업해도 되는지 물어봤다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204536-7317bcba405665632247d11e27f21bee.png" width="1280" height="325" class="img_ev3q"></p>
<p>assgin 해주셨고, 문서 위치가 바뀌었으니 compose-spec 레포지토리에서 PR을 해달라는 친절한 가이드까지 주셨다.</p>
<h1>Pull Request 생성하기</h1>
<p>먼저 compose-spec을 fork하고, 소스코드 수정 후 commit 했다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204610-5413e3c821b694c110606f39d3151d90.png" width="1280" height="555" class="img_ev3q"></p>
<p>다시 upstream으로&nbsp;와서 pull request를 생성했다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204624-fdecc28aa37fba29ed24fe8cd9f58c4d.png" width="1280" height="977" class="img_ev3q"></p>
<p>이건 내가 CONTRIBUTING.md를 꼼꼼히 보지 않아 생긴 일이다. ㅜㅜ</p>
<p>그냥 커밋할때 계정 정보를 확인해달라는 말인 줄 알았는데,</p>
<p>커밋 메세지에 sign-off를 포함하지 않으면 DCO check에 실패 하면서 오류가 난다.</p>
<p>친절히 알려주셔서 커밋 메세지 수정 후 강제 푸시했고,</p>
<p>이후 빌드에 한 번 실패해 한가지 수정을 더 하고 머지되었다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204639-c07af163ab852efa41e6921ac7434576.png" width="1600" height="348" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204646-5fb251394303ed66639c4a7d58982e93.png" width="910" height="492" class="img_ev3q"></p>
<p>이렇게&nbsp;오픈소스 기여에 작지만 위대한 첫 걸음을 내딛었다.</p>
<p>앞으로도 문서 뿐만 아니라 코드 레벨까지 .. 더 많은 오픈소스에 기여할 수 있게 되면 좋겠다.</p>]]></content>
        <author>
            <name>yuseonLim</name>
            <uri>https://github.com/devyuseon</uri>
        </author>
        <category label="docker" term="docker"/>
        <category label="opensource-contributions" term="opensource-contributions"/>
    </entry>
</feed>