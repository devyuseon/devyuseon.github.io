<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>뉴뉴의 메모장 Blog</title>
        <link>https://devyuseon.github.io/blog</link>
        <description>뉴뉴의 메모장 Blog</description>
        <lastBuildDate>Tue, 13 Feb 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[2023 회고]]></title>
            <link>https://devyuseon.github.io/blog/2024/02/13/2023-retrospect</link>
            <guid>https://devyuseon.github.io/blog/2024/02/13/2023-retrospect</guid>
            <pubDate>Tue, 13 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[벌써 2월이지만 2023년 회고를 써본다.]]></description>
            <content:encoded><![CDATA[<p>요즘 회사 업무 외에도 개인 공부를 점점 늘려가고 있다. 프로젝트도 새로 시작 하고, 스터디도 참여하며
바쁜 시간을 보내고 있다. 블로그도 흔한 기술지식 복제 블로그 보다 나만의 생각을 공유하는 공간으로 만들고 싶어
새로 개설했다. 훗날 내가 바라던 모습이 되어 이때의 나를 다시 복기하기 위해서 2023~2024초 회고를 남긴다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="취업">취업<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EC%B7%A8%EC%97%85" class="hash-link" aria-label="Direct link to 취업" title="Direct link to 취업">​</a></h2>
<p>2023년 상반기, 이제 막 상반기 서류 발표가 될 쯔음에 운좋게 안랩에 합격해 재직중이다.</p>
<p>바랐던 꿈의 회사는 아니지만, 꿈의 장소였던 판교에 어찌저찌 입성하게 되었다. 첫 3달은 OJT 과정을 하면서
업무에 필요한 지식을 익히는 시간을 가졌다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="처음-배운-것들-">처음 배운 것들 ..<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EC%B2%98%EC%9D%8C-%EB%B0%B0%EC%9A%B4-%EA%B2%83%EB%93%A4-" class="hash-link" aria-label="Direct link to 처음 배운 것들 .." title="Direct link to 처음 배운 것들 ..">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="angularjs">Angular.js<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#angularjs" class="hash-link" aria-label="Direct link to Angular.js" title="Direct link to Angular.js">​</a></h4>
<p>백엔드 개발자여도 프론트 개발은 할 줄 알아야 한다는 생각에, 호기롭게 풀스택 포지션에 지원했다.
React나 Vue같은 기술을 배울 줄 알았지만.. Angular.js와 친해져야 했다.
모든 레퍼런스(스택오버플로우, 심지어는 공식문서, 블로그 등등...)가 2015-2016에 멈춰있었다.
프론트 개발도 처음이였어서 공부 방법 자체를 잘 몰랐다. 그리고 <del>이미 없어진거나 다름없는</del>
Angular.js와 그다지 친해지고 싶지 않았다. 깊게 알아서 Angular.js 마스터가 되어도
앞으로 써먹을 일이 크게 없다고 생각했다. 하지만 당장 업무를 해내야 하기 때문에 A to Z로 공부하는 방법이 아니라,
회사 소스코드를 먼저 보고 거기에 쓰인 기술과 문법을 찾아보는 방식을 선택했다.
콘솔로그를 이곳 저곳 찍어보며 이 버튼은 어떻게 동작하는지, 이 부분은 언제 렌더링 되는지,
이걸 눌렀을때 데이터가 어떻게 바뀌는지 하나하나 찾아보았다. 양이 꽤 많았지만, 감사하게도 OJT라는 시간을 주셔서
코드 전반적으로 거의 한번은 다 보고 업무를 시작할 수 있게 되었다. 그렇게 몇개월동안 프론트 운영 업무도 완벽히 수행해냈다.
원하던 커리어 방향은 아니지만, 어쨌든 주어진 것을 해낼 수 있는 사람은 된 것 같다.</p>
<p>그리고 지금은 React로 전환 예정에 있어서, 회사에서 React를 공부중이다. 그동안 아무 생각 없이 양방향 데이터 바인딩 방식인
Angular.js만 써오다가 단방향 방식인 React로 뭘 만들려니 쉽지는 않다.</p>
<p>하지만 하면 할수록 백엔드를 더 열심히 하고 싶다는 생각이 든다... 어쩔 수 없다보다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="nodejs-express">Node.js, Express<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#nodejs-express" class="hash-link" aria-label="Direct link to Node.js, Express" title="Direct link to Node.js, Express">​</a></h4>
<p>Java와 Spring만 공부해왔던 터라, Node.js와 Express 기반으로
개발 하는 것은 나름의 도전이였다. Javascript와도 매우 .. 친하지 않아 많이 낯설었다.
promise라던가, 비동기 라던가,, 이런 개념들을 새로 배울 수 있었다.
Spring 진영에선 비동기 처리를 위해서 Spring WebFlux나 @Async로 처리를 해줘야 하는 것으로 아는데,
Node.js 환경에선 그런 추가적인 장치 없이 비동기 프로그래밍이 가능한 것이 매력적인 것 같다.
아직 모든 것을 다 이해하지는 못했지만 궁금한것을 찾아보며 하나씩 이해중이다.
싱글스레드 방식이지만 요청이 Blocking I/O(네트워크, 파일)일 경우 별도의 스레드에서 처리하게 된다.
어떤 서비스이냐에 따라 노드를 채택하는것이 더 좋을 수 있을 것 같다.
그동안 Spring이 최고! 인줄 알았는데, 노드를 새로 공부하면서 둘의 장단점에 대해 조금은 알게 되었다.
라고 말하면서.. 개인적으로는 Spring을 공부하고 있다. 아무래도 시장은 아직 Spring 진영인 것 같기 때문이다. 그렇지만 필요할때 언제든 node나 파이썬을 도입해서 써볼 열린 마음은 준비되어 있다. :)</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="docker">Docker<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#docker" class="hash-link" aria-label="Direct link to Docker" title="Direct link to Docker">​</a></h4>
<p>도커도 입사후에 처음 공부했다. 도커는 정의와 개념부터 찬찬히 공부했다. 도커 공부는 공식문서를 가장 많이 참고했다.
공부 후에는 Docker와 Container란?, Dockerfile, Docker Compose, 이미지 최적화, Volume, 네트워크 등의 주제로 나누어 6개정도 글을 작성했고 이를 발표하는 시간을 가졌다.
추가적으로 더 다듬어 블로그에도 업로드 했는데, 이 블로그로 시간이 생기면 옮겨올 생각이다.
회사 프로젝트가 리눅스 기반이라 로컬 환경이 구축되어 있지 않았다. 파일 경로나 명령어 등이 리눅스 기준이여서 로컬에서 개발이 불가능했다. Docker Desktop이 유료화 되어 삭제해달라는 전사 메일을 받아
WSL로 로컬 개발환경을 구축해 공유했다. RockyLinux 8버전을 쓰고 있는데, 이건 마이크로소프트가 제공해주지 않아 도커 컨테이너에서 추출해야 했다. 이 가이드 문서도 작성해 파트에 공유했다.</p>
<p>아직 완벽히 이해하지 못했지만, Docker와 Docker Swarm, Ansible, Bamboo를 이용한 빌드/배포
운영은 할 수 있게 되었다. 입사 할 당시엔 빌드 배포 부분이 가장 이해가 안되고 어려웠다. 그래도 흐름정도는 알게 된 것이 올해 가장 큰 수확인 듯 하다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="그리고-">그리고 ..<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EA%B7%B8%EB%A6%AC%EA%B3%A0-" class="hash-link" aria-label="Direct link to 그리고 .." title="Direct link to 그리고 ..">​</a></h3>
<p>내 생각과 회사의 방향, 그리고 성향(?)은 많이 달랐다. 여긴 좀 안정적인 느낌이고 내가 그리던 활발한, 서로 함께하고 공유하는 문화를 가진 그런 개발과는 거리가 좀 있는 듯 했다. 내가 맡은 프로젝트는 나 포함 개발자가 두명 뿐이라.. 좋은 시니어들이 많은 회사에 가고싶다는 생각을 했다. 물론 여기도 훌륭한 개발자들이 많다. 그러나 우리 팀은 총 15명인데, 그중 웹개발자는 나포함 두명이다. 회의를 할때나
기술 공유 세션을 가질때 앉아있기 민망하다는 생각도 가끔 한다. 개발자는 폭넓게 알아야 하지만
윈도우 개발, 리눅스 커널 개발?, 암호학(??정수론???) 까지는 내가 품을 수 없을 것 같다..
아무튼 그런 분들이 서로 토론하면서 지식을 나누는 대화를 하는 것을 보면.. 나도 끼고싶다는 생각을 많이 한다. 환경적인것을 탓하는 것은 나쁜 것이지만 그래도 웹개발자가 많은 곳에서 일하면 내가 흡수할 수 있는 지식이 아무래도 많지 않을까? 좋은 코드든 나쁜 코드든 다양한 사람들의 코드도 보고 싶다. 그리고 내가 작성한 코드에 대해 다양한 사람들의 의견도 들어보고 싶다. 이제 다음주부턴 혼자 일하게 된다.. 휴직을 하게 되셔서 혼자가 되었다. 이제 운영업무도 더 늘어날 것 같다. 빨리 할거 다 해버리고 하고싶은거 하게 해달라고 해야지..</p>
<p>회사에서 하는 일이 내가 하고싶은 기술스택과는 상이했고, 내가 바랐던 개발자의 삶이 맞나 싶어서 몇달은 좀 우울해 했었다. 지금은 다 극복하고 오히려 더 열심히 달리는 중이다. 우울해 할 시간이 어디있나.. 공부해야 한다..!! 요즘 개발자의 기준이 점점 상향되고 있는 것을 느낀다. 시간이 갈 수록 더 많이 알아야 되는 것 같다. 다행히도 공부는 즐겁다. 알아가는 즐거움이란 개발자에게 가장 큰 재능(?) 이 아닐까 싶은데, 다행히도 갖춘 듯 하다. 힘든데, 재밌다. 모르는게 많아서 늘 괴롭기도 하다..</p>
<p>일을 하며 더욱 더 알게 된 것인데, 나는 아무래도 관종인 듯 하다. 사람들이 쓰는 것을 개발하는게 좋고,
세상에 나와있어 이거 내가 개발했어요~ 하는 것이 좋다. 아무래도 사내 서비스다 보니 재미가 좀 떨어진다. 제품 개발을 하는 팀이였으면 좀 더 재밌었을지도 모른다. 집 좀 못가도 그런 개발을 해보고 싶다.
언젠간 서비스 회사를 가고 싶다. 그게 나에게 더 보람을 가져다 줄 것 같다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="졸업">졸업<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EC%A1%B8%EC%97%85" class="hash-link" aria-label="Direct link to 졸업" title="Direct link to 졸업">​</a></h2>
<div style="text-align:justify;width:40%"><p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/202402140133-571eec02d022bb580f657e8ca23be10e.jpeg" width="1170" height="2080" class="img_ev3q"></p></div>
<p>졸업을 했다. 코로나 학번이라 컴퓨터공학과 친구들을 많이 사귀지 못한 것이 아쉽다.. 자율공학부였던 터라, 1학년은 컴공이 아니였기 때문이다. 그럼에도 불구하고 좋은 친구들을 많이 사귀었다. 친구 없다고 생각했는데 이렇게 예쁜 꽃다발을 많이 받은걸 보면 그렇게 잘못 산건 아니였구나 생각이 든다 ㅋㅋ 졸업 유예를 한 상태에서 취업한 터라, 회사를 다니다가 졸업을 하게 되었다. 난 정말 취업하려면 1년 반은 걸릴 줄 알았다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="자취">자취<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EC%9E%90%EC%B7%A8" class="hash-link" aria-label="Direct link to 자취" title="Direct link to 자취">​</a></h2>
<p>본가는 성북구인지라, 판교는 좀 멀었다. 솔직히 다닐 수는 있었지만 핑계로 자취를 하겠다고 강력하게 주장했고, 정자역 주변에서 자취를 시작하게 되었다. 오래된 아파트이지만 19평이라 비좁거나 하지는 않다. 이번에 이사오면서 M7 스마트모니터도 샀는데, 아주 만족한다. 본가에서는 없었던 나만의 티비가 생겼다. 누워서 OTT 보는 행복이란.. 식탁도 사고 소파도 사고 커튼도 달고, 아주 만족하고 있다. 처음엔 너무 외로워서 힘들었는데 이젠 좀 적응되었다. 청소하는 즐거움도 알게 되었다ㅋㅋ 한번 화장실 청소 시작하면 집착적으로 1시간은 청소한다.</p>
<h1>끝내며</h1>
<p>다시 공부를 시작해 이것저것 열심히 하는 중이다. 회사에서 이룰 수 없다면 개인적으로 공부를 통해서 이것저것 쌓아 나가야 겠다는 생각이다. 물론 회사에서도 집중해서 일을 정확하고 빠르게 끝내고, 내가 개인적으로 하고 싶었던 것들을 하겠다고 도전해볼 생각이다. 회고는 처음 써보는데 이렇게 쓰는게 맞는 지는 모르겠다. 나중에 다시 읽어보려고 한번 써봤다. 그럼 .. 이상 끝.</p>]]></content:encoded>
            <category>retrospect</category>
        </item>
        <item>
            <title><![CDATA[[TroubleShooting] express가 응답을 보내지 않았다. 왜..?]]></title>
            <link>https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response</link>
            <guid>https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response</guid>
            <pubDate>Sun, 04 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 문제 상황" title="Direct link to 문제 상황">​</a></h2>
<p>문제 상황이 무엇인지 설명하기 전에, 우리 서비스는 파일을 <code>등록</code> 하는 기능이 있고, 똑같은 파일을 중복으로 등록할 수 없다. 중복 등록을 시도할 경우엔 메세지가 뜨며 등록이 안된다.</p>
<p>그런데 사용자로부터 이런 연락을 받았다.</p>
<blockquote>
<p>파일을 업로드 하고, <code>등록</code> 버튼을 눌렀는데 <strong>등록에 실패</strong> 했다는 메시지가 떴습니다.<br>
그래서 다시 등록을 시도했는데, <strong>중복 등록</strong> 이라고 하며 등록이 되지 않았습니다. <br>
확인해보니 처음에 등록한 리포트가 잘 등록이 되어 있네요?</p>
</blockquote>
<p>그러니까, 실패했다는 메세지가 떴는데 실제론 성공했다는 거다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="증상-파악">증상 파악<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EC%A6%9D%EC%83%81-%ED%8C%8C%EC%95%85" class="hash-link" aria-label="Direct link to 증상 파악" title="Direct link to 증상 파악">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/diagram1-a15ada59da32d02e605b9bbf0305a1fa.png" width="1469" height="287" class="img_ev3q"></p>
<p>등록 기능 프로세스는 이렇다. express에서 요청을 전달하고, spring에서 등록 과정을 수행하고, 그것을 다시 express에 넘기고, express는 클라이언트에 완료를 전달한다.</p>
<p>로그를 살펴보니, <strong>express가 client로 등록 완료 전달</strong> 하는 부분 외에는 모두 success, 200으로 에러 없이 잘 수행되었다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/diagram2-e6f4ff2dbd839a5d213a07cdb152183e.png" width="1469" height="287" class="img_ev3q"></p>
<p><strong>express가 client로 등록 완료 전달</strong> 하는 부분은 ? 로 남았다. 이런 로그를 발견했기 때문이다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[시간] "POST /api/*** HTTP/1.1" - - "출처" "클라이언트 정보" - - ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 로그는 express의 <a href="https://expressjs.com/en/resources/middleware/morgan.html" target="_blank" rel="noopener noreferrer">morgan</a> 미들웨어가 남긴 로그이다. 원래라면 아래처럼 응답시간, 응답크기, 걸린시간이 표시 되어야 한다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[시간] "POST /api/*** HTTP/1.1" 200 49 "출처" "클라이언트 정보" - 317.922 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>뭔가 응답이 정상적으로 처리되지 않은 듯 했다.</p>
<p>그러나 미스테리인 점은 .. express가 <code>await</code> 으로 spring의 응답을 기다리고, 그 뒤에 성공했을땐 로그를 남기게 되어 있는데, 그 로그는 남았다는 것이다.</p>
<p>express에 에러는 없었고, spring에도 에러는 없었는데, 클라이언트에 응답 전송만 정상적으로 되지 않았다.</p>
<p>찾아보니, 위 -- 로 처리된 로그는 express가 응답 자체를 하지 않았을 때 일어나는 일이라고 한다.</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging</a> &gt; <a href="https://github.com/expressjs/morgan/issues/121" target="_blank" rel="noopener noreferrer">https://github.com/expressjs/morgan/issues/121</a></p>
</blockquote>
<p>위 링크에서 추정한 원인은 다음과 같다.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>아마도..</div><div class="admonitionContent_BuS1"><p>response를 보내기 전에 TCP 연결이 끊어진 듯!</p></div></div>
<p>로그 시간을 파악해보니 클라이언트 요청 ~ spring의 응답 까지는 1분 5초 내외로 소요되었다.</p>
<p>그렇다면 어디서 TCP 연결을 해제했을까?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="원인-파악">원인 파악<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EC%9B%90%EC%9D%B8-%ED%8C%8C%EC%95%85" class="hash-link" aria-label="Direct link to 원인 파악" title="Direct link to 원인 파악">​</a></h2>
<p>내가 의심한 것들은 다음과 같다.</p>
<ul>
<li>axios timeout</li>
<li>node.js timeout</li>
<li>OS의 TCP timeout</li>
<li>L4 스위치 timeout</li>
<li>Nginx timeout</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="axios-timeout">axios timeout<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#axios-timeout" class="hash-link" aria-label="Direct link to axios timeout" title="Direct link to axios timeout">​</a></h3>
<p>따로 설정한 것이 없다. <a href="https://github.com/axios/axios/blob/main/README.md#request-config" target="_blank" rel="noopener noreferrer">default는 no timeout</a> 이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nodejs-timeout">node.js timeout<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#nodejs-timeout" class="hash-link" aria-label="Direct link to node.js timeout" title="Direct link to node.js timeout">​</a></h3>
<p>노드13 버전 이후로는 no timeout이다.</p>
<p>노드8 버전을 쓰는 우리 프로젝트는 120s가 기본으로 설정 되어 있다. (처음알았다 ..)</p>
<blockquote>
<p><a href="https://nodejs.org/api/http.html#servertimeout" target="_blank" rel="noopener noreferrer">https://nodejs.org/api/http.html#servertimeout</a></p>
</blockquote>
<p>그러나 2분 보다 오래 걸리진 않았으므로 이것도 아니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="os의-tcp-timeout">OS의 TCP timeout<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#os%EC%9D%98-tcp-timeout" class="hash-link" aria-label="Direct link to OS의 TCP timeout" title="Direct link to OS의 TCP timeout">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">cat /proc/sys/net/ipv4/tcp_keepalive_time</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>tcp_keepalive : tcp 연결이 되고 나서 얼마나 그 연결을 지속하는지</li>
</ul>
<p>7200(2시간) 으로 널널했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="l4-스위치">L4 스위치<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#l4-%EC%8A%A4%EC%9C%84%EC%B9%98" class="hash-link" aria-label="Direct link to L4 스위치" title="Direct link to L4 스위치">​</a></h3>
<p>L4 에서도 뭔가 타임아웃이 걸려있는것은 아닐까..? 하고 해당 사항을 인프라팀에 문의했는데</p>
<p>아니다. (<del>의심해서 죄송합니다...</del>)</p>
<p>전에도 L4 설정 문제때문에 안된 기능이 있어서, 생각났었는데 .. 어쨌든 이게 문제는 아니였다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nginx-timeout">Nginx timeout<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#nginx-timeout" class="hash-link" aria-label="Direct link to Nginx timeout" title="Direct link to Nginx timeout">​</a></h3>
<div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockTitle_Ktv7">/etc/nginx/nginx.conf</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token directive keyword" style="color:hsl(301, 63%, 40%)">keepalive_timeout</span><span class="token directive"> </span><span class="token directive number" style="color:hsl(35, 99%, 36%)">65</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> // default 75</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>여기였다 !!</p>
<p>keepalive_timeout이 65초로 설정 되어 있었다. 지금껏 Nginx 설정을 바꿀 일이 없어서 자세히 들여다 보지 않아서 몰랐다.</p>
<p>이 사실을 알고 난 뒤 nginx 에러 로그를 보니 (로그 경로는 nginx.conf 에 있다.)</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockTitle_Ktv7">error.log</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[error] upstream timed out (110: Connection timed out) while reading response header from upstream .. 생략</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>connection timeout 에러 로그가 찍혔다.</p>
<p>spring이 express로 응답을 보내, express가 client에 응답하기 전에 client와 express간의 연결이 끊어져 client가 응답을 받지 못한 것이다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결">해결<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#%ED%95%B4%EA%B2%B0" class="hash-link" aria-label="Direct link to 해결" title="Direct link to 해결">​</a></h2>
<p>해결 방법으로는 이런 것들이 있겠다.</p>
<ul>
<li>timeout 늘리기</li>
<li>upstream인 spring 서버의 처리 성능 향상하기 (best)</li>
</ul>
<p>그리고 nginx 로그는 도커 컨테이너 안에 있어서, 컨테이너가 내려가면 로그 파일이 날아가 볼 수 없다.
도커 컨테이너에서 쌓은 로그는 volume으로 연결해 host에도 쌓게 해놨다. nginx 로그도 표준 출력으로 내보내 (/dev/stdout 으로 심볼릭 링크 걸기) 도커가 로그를 수집하게 하거나 nginx 로그를 volume으로 설정해 보관 할 필요가 있다.</p>
<p>일단 timeout을 늘려서 급한 불을 끄고, spring 서버의 처리 성능을 높일 방법을 생각 해 볼 것이다.</p>
<p>적고보니 별일 아닌 듯 하지만,, 의미 있었던 과정이였다.</p>
<p>이 이슈로 인해 우리 서비스의 어떤 부분에 timeout이 얼만큼 걸려있는지 확인 할 수 있었고, 로그도 좀 더 보충할 수 있었다. 다음에 이러한 일이 발생하면 이 경험으로 인해 원인 파악을 조금은 빨리 할 수 있을까 기대해보며 글을 마친다.</p>]]></content:encoded>
            <category>troubleshooting</category>
            <category>express</category>
            <category>nginx</category>
        </item>
        <item>
            <title><![CDATA[오픈소스 첫 기여 ✨]]></title>
            <link>https://devyuseon.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose</link>
            <guid>https://devyuseon.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose</guid>
            <pubDate>Mon, 29 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !]]></description>
            <content:encoded><![CDATA[<p>비록 공식문서의 오류를 고치는 일이였지만,</p>
<p>처음으로 오픈소스에 기여했고 무려 Docker 문서 이다!!</p>
<p>머지 되었을때는 정말 뿌듯했고 이슈를 생성하고 PR을 날리는 과정도 재밌었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-발견-이슈-생성">문제 발견, 이슈 생성<a href="https://devyuseon.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose#%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EA%B2%AC-%EC%9D%B4%EC%8A%88-%EC%83%9D%EC%84%B1" class="hash-link" aria-label="Direct link to 문제 발견, 이슈 생성" title="Direct link to 문제 발견, 이슈 생성">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204509-f2e74099202853e823cb78732f5ca801.png" width="1280" height="1272" class="img_ev3q"></p>
<p>문서에 틀린 부분을 발견하고, 이슈를 생성했다.</p>
<p>수정이 필요한게 맞다면 내가 작업해도 되는지 물어봤다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204536-7317bcba405665632247d11e27f21bee.png" width="1280" height="325" class="img_ev3q"></p>
<p>assgin 해주셨고, 문서 위치가 바뀌었으니 compose-spec 레포지토리에서 PR을 해달라는 친절한 가이드까지 주셨다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pull-request-생성하기">Pull Request 생성하기<a href="https://devyuseon.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose#pull-request-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to Pull Request 생성하기" title="Direct link to Pull Request 생성하기">​</a></h2>
<p>먼저 compose-spec을 fork하고, 소스코드 수정 후 commit 했다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204610-5413e3c821b694c110606f39d3151d90.png" width="1280" height="555" class="img_ev3q"></p>
<p>다시 upstream으로&nbsp;와서 pull request를 생성했다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204624-fdecc28aa37fba29ed24fe8cd9f58c4d.png" width="1280" height="977" class="img_ev3q"></p>
<p>이건 내가 CONTRIBUTING.md를 꼼꼼히 보지 않아 생긴 일이다. ㅜㅜ</p>
<p>그냥 커밋할때 계정 정보를 확인해달라는 말인 줄 알았는데,</p>
<p>커밋 메세지에 sign-off를 포함하지 않으면 DCO check에 실패 하면서 오류가 난다.</p>
<p>친절히 알려주셔서 커밋 메세지 수정 후 강제 푸시했고,</p>
<p>이후 빌드에 한 번 실패해 한가지 수정을 더 하고 머지되었다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204639-c07af163ab852efa41e6921ac7434576.png" width="1600" height="348" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204646-5fb251394303ed66639c4a7d58982e93.png" width="910" height="492" class="img_ev3q"></p>
<p>이렇게&nbsp;오픈소스 기여에 작지만 위대한 첫 걸음을 내딛었다.</p>
<p>앞으로도 문서 뿐만 아니라 코드 레벨까지 .. 더 많은 오픈소스에 기여할 수 있게 되면 좋겠다.</p>]]></content:encoded>
            <category>docker</category>
            <category>opensource-contributions</category>
        </item>
        <item>
            <title><![CDATA[[Java] 에러 메시지, Stacktrace가 생략되는 문제]]></title>
            <link>https://devyuseon.github.io/blog/2024/01/02/java-no-stacktrace</link>
            <guid>https://devyuseon.github.io/blog/2024/01/02/java-no-stacktrace</guid>
            <pubDate>Tue, 02 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[NullPointerException의 에러 메시지가 빈 채로 출력된다]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://devyuseon.github.io/blog/2024/01/02/java-no-stacktrace#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 문제 상황" title="Direct link to 문제 상황">​</a></h2>
<p>테스트 스크립트를 배포시에 실행하게 되어 있는데, 해당 스클립트는 같은 api를 여러 case로 몇십번 호출한다.</p>
<p>최초 실행시에는 성공하고,</p>
<p>두번째 이후부턴 실패한다.</p>
<p>지금까지는 서비스 실행시 한번만 실행했어서 발견을 못 한 문제였다.</p>
<p>에러가 발생한 지점은 여기였다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Exception</span><span class="token plain"> e</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> msg </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getMessage</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// errMsg: null</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">equalsIgnoreCase</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"XXX"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// NullPointerException 발생!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>try ~ catch 문에서 에러 메세지를 가져와 어떤 에러 메시지인지 판단하려고 할 때, <code>e.getMessage()</code> 결과가&nbsp;<strong>null</strong>&nbsp;이 되어 catch 구문에서 다시 에러가 발생하는 것이였다.</p>
<p>로직을 살펴보니 특정 case엔 무조건 try쪽에서 NPE가 발생하고, catch문으로 들어오게 되어있었다.</p>
<p>근데 왜 최초 실행시엔 msg가 null이 아닌가..???!!!</p>
<p>해당 현상을 재현한 뒤에 최초 실행 / 이후 실행에 대한 에러를 출력해 보았다.</p>
<p><strong>최초</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">class java.lang.NullPointerException: Cannot invoke "Object.toString()" because of "java.util.Map.get(Object) is null</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">// 굉장히 긴 StackTrace</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>두번째~</strong></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token plain"> </span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">java</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">lang</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">NullPointerException</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">null</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>나는 내가 로직 어딘가에 NPE가 발생하는 원인을 놓친줄 알고 며칠을 삽질했는데, 스택오버플로우에서 이 글을 발견했다.</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace</a></p>
</blockquote>
<p>관련해서 간략하게&nbsp;조사해 보았다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="jvm-stacktrace-생략">JVM Stacktrace 생략<a href="https://devyuseon.github.io/blog/2024/01/02/java-no-stacktrace#jvm-stacktrace-%EC%83%9D%EB%9E%B5" class="hash-link" aria-label="Direct link to JVM Stacktrace 생략" title="Direct link to JVM Stacktrace 생략">​</a></h2>
<p><a href="https://www.oracle.com/java/technologies/javase/release-notes-introduction.html" target="_blank" rel="noopener noreferrer">JDK5 릴리즈 노트</a>를 보면 Exception이 반복적으로 발생할 때, 컴파일러는 StackTrace를 출력하는것을 멈춘다고 한다.</p>
<p>이것은 JVM의 JIT컴파일러의 C2컴파일러의 기본 최적화 옵션 이라고 한다.</p>
<p><a href="https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L528" target="_blank" rel="noopener noreferrer">OpenJDK의 소스 코드</a>를 보면 다음 다섯가지 Exception에 대해 최적화 옵션이 적용된다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p><strong>Stacktrace 생략 최적화 옵션 적용되는 Exception</strong></p><ul>
<li>NullPointerException</li>
<li>ArithmeticException</li>
<li>ArrayIndexOutOfBoundsException</li>
<li>ClassCastException</li>
<li>ArrayStoreException</li>
</ul></div></div>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205210954-daea46cab06af5c5a21bd4ebeeaf3713.png" width="1234" height="1556" class="img_ev3q"></p>
<p>최적화 옵션을 비활성화 하려면 아래 JVM 옵션을&nbsp;추가해 주면 된다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">-XX:-OmitStackTraceInFastThrow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>하지만 이는 성능 최적화를 위한 옵션으로, 해당 Exception이 반복적으로 일어나지 않게끔 처리 하는것이 올바른 방향 일 것이다.</p>
<p>Exception 처리에 대한 최적화를 하는 이유가 궁금해서 찾아보았다.</p>
<p>Java에서 Exception을 던지는 비용은 꽤 비싸다고 한다. Exception이 발생하면 해당 예외가 어디서 발생했는지 추적하며 정보를 수집하고 Stack Trace를 생성한다. 이를 계산하는데에도 시간이 꽤 걸린.</p>
<p>또, 예외 객체를 새로 생성하고 초기화 하는 과정이 반복되기 때문에 좋지 않다. 그리고 Exception이 발생하면 그것이 어떤 예외인지 적절한 예외 핸들러를 찾아 리턴해줘야 하는데, 예외 핸들러를 찾는 과정 또한 오래 걸린다.</p>
<p>프로젝트를 할 때도, 적절한 예외 상황에 Custom Exception을 던지곤 했는데, 이게 맞는 방법인지 생각해볼 필요가 있는 듯 하다.</p>
<p>그리고 스택 추적이 필요하지 않은 경우라면 override를 통해 trace를 담지 않도록 하는 방법도 좋겠다.</p>]]></content:encoded>
            <category>java</category>
        </item>
    </channel>
</rss>