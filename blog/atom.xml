<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://devyuseon.github.io/blog</id>
    <title>뉴뉴의 메모장 Blog</title>
    <updated>2024-04-08T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://devyuseon.github.io/blog"/>
    <subtitle>뉴뉴의 메모장 Blog</subtitle>
    <icon>https://devyuseon.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Process.waitFor() 이 영원히 끝나지 않는다.]]></title>
        <id>https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur</id>
        <link href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur"/>
        <updated>2024-04-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[자바에서 외부 프로세스에 exec() 명령을 전달하고, waitFor() 메서드 사용시 행이 걸리는 이슈]]></summary>
        <content type="html"><![CDATA[<p>Java에서 command를 실행하는 부분에서, 행이 걸리는 이슈가 발생했다. 아무 오류도 나타나지 않고 시스템이 행이 걸려버렸다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 문제 상황" title="Direct link to 문제 상황">​</a></h2>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">Process</span><span class="token plain"> process </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Runtime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getRuntime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">exec</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">waitFor</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 여기가 문제</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>waitFor()</code> 가 끝나지 않는 문제가 있었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="원인">원인<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EC%9B%90%EC%9D%B8" class="hash-link" aria-label="Direct link to 원인" title="Direct link to 원인">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="문제가-된-부분">문제가 된 부분<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EB%AC%B8%EC%A0%9C%EA%B0%80-%EB%90%9C-%EB%B6%80%EB%B6%84" class="hash-link" aria-label="Direct link to 문제가 된 부분" title="Direct link to 문제가 된 부분">​</a></h3>
<p>원인은 생각보다 금방 찾을 수 있었다. 유명한 이슈였다..! <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html" target="_blank" rel="noopener noreferrer">JavaDoc</a>에도 이런 내용이 있다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><blockquote>
<p>Because some native platforms only provide limited buffer size for standard input and output streams, failure to promptly write the input stream or read the output stream of the subprocess may cause the subprocess to block, or even deadlock.</p>
</blockquote><p>일부 네이티브 플랫폼은 표준 입력 및 출력 스트림에 대해 제한된 버퍼 크기만을 제공하기 때문에, 입력 스트림을 즉시 작성하거나 하위 프로세스의 출력 스트림을 읽지 않으면 하위 프로세스가 차단되거나 심지어 교착 상태에 빠질 수 있다.</p></div></div>
<p>Process 클래스를 통해 서브 프로세스를 생성하고, <code>exec()</code> 으로 실행한다. 하위프로세스는 Process 클래스의 <code>getInputStream()</code>과 <code>getErrorStream()</code> 메서드를 통해 출력 메시지를 부모 프로세스에 보낸다. 그리고 문제가 된 코드는 아래 방식으로 출력과 오류를 <strong>순차적</strong>으로 읽고 처리한다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">InputStreamReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getInputStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-8"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 로그에 쓰는 작업 ..</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">InputStreamReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getErrorStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-8"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 로그에 쓰는 작업 ..</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그런데 이때 만약 실행되는 프로세스가 많은 양의 출력을 생성하고, 이를 빠르게 읽어들이지 않으면 버퍼가 가득 차서 프로세스가 블록될 수 있다.</p>
<p>데드락이 발생하는 상황은 다음과 같다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="데드락이-발생하는-상황">데드락이 발생하는 상황<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EB%8D%B0%EB%93%9C%EB%9D%BD%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 데드락이 발생하는 상황" title="Direct link to 데드락이 발생하는 상황">​</a></h3>
<ol>
<li><strong>외부 프로세스 실행</strong>: 자바에서 <code>Runtime.exec()</code> 또는 <code>ProcessBuilder.start()</code>를 사용하여 외부 프로세스를 실행, 자바 애플리케이션(부모 프로세스)과 외부 프로세스(자식 프로세스) 사이에는 표준 입력, 출력, 오류 스트림을 통한 데이터 교환이 가능해진다.</li>
<li><strong>데이터 쓰기 및 읽기 시작</strong>: 자바 애플리케이션은 외부 프로세스의 표준 출력과 표준 오류 스트림을 읽기 시작한다. 동시에 외부 프로세스는 실행 결과를 표준 출력 및 표준 오류 스트림으로 출력하기 시작할 수 있다.</li>
<li><strong>버퍼 가득 참</strong>: 외부 프로세스가 많은 양의 데이터를 빠르게 출력하면 표준 출력 또는 표준 오류 스트림의 버퍼가 가득 찬다. 이 상태에서 자바 애플리케이션이 버퍼에서 데이터를 빨리 읽지 않으면 외부 프로세스는 버퍼에 데이터를 더이상 쓸 수 없게 된다.</li>
<li><strong>자바 애플리케이션 처리 지연</strong>: 만약 자바 애플리케이션이 표준 출력만 읽고 표준 오류는 나중에 읽으려고 한다면, 표준 오류의 버퍼가 가득 차 있으면서 표준 출력의 처리가 완료되지 않는 상황이 발생할 수 있다. 이는 외부 프로세스가 더 이상 진행되지 못하게 하고, 자바 애플리케이션도 외부 프로세스의 종료를 기다리는 데드락 상태에 빠지게 한다.</li>
<li><strong>데드락</strong>: 결국 외부 프로세스는 표준 출력 또는 표준 오류 스트림으로 데이터를 더 출력할 수 없어 실행을 멈추고, 자바 애플리케이션은 외부 프로세스의 완전한 종료를 기다리면서 더 이상 진행하지 못한다. 결과적으로, 두 프로세스 모두 서로의 다음 단계를 기다리는 상태에 빠지게 되어 데드락이 발생한다.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결방법">해결방법<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95" class="hash-link" aria-label="Direct link to 해결방법" title="Direct link to 해결방법">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="내용이-필요-없을-경우---close">내용이 필요 없을 경우 - close()<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EB%82%B4%EC%9A%A9%EC%9D%B4-%ED%95%84%EC%9A%94-%EC%97%86%EC%9D%84-%EA%B2%BD%EC%9A%B0---close" class="hash-link" aria-label="Direct link to 내용이 필요 없을 경우 - close()" title="Direct link to 내용이 필요 없을 경우 - close()">​</a></h3>
<p>입력스트림, 출력스트림을 사용할 일이 없다면 <code>waitFor()</code> 전에 스트림을 다 닫아준다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">Process</span><span class="token plain"> process </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> processBuilder</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">start</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// or</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Process</span><span class="token plain"> process </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Runtime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getRuntime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">exec</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getErrorStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">close</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getInputStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">close</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getOutputStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">close</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">waitFor</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-commons-exec-사용">Apache Commons Exec 사용<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#apache-commons-exec-%EC%82%AC%EC%9A%A9" class="hash-link" aria-label="Direct link to Apache Commons Exec 사용" title="Direct link to Apache Commons Exec 사용">​</a></h3>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token comment" style="color:hsl(230, 4%, 64%)">// build.gradle</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">implementation</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'org.apache.commons:commons-exec:1.3'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>의존성을 추가하고, 사용하면 해결법을 직접 구현할 필요 없이 안전하게 사용 가능하다고 한다. 나는 다른 방법을 사용해 해결했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="스레드-병렬처리">스레드 병렬처리<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EC%8A%A4%EB%A0%88%EB%93%9C-%EB%B3%91%EB%A0%AC%EC%B2%98%EB%A6%AC" class="hash-link" aria-label="Direct link to 스레드 병렬처리" title="Direct link to 스레드 병렬처리">​</a></h3>
<ul>
<li>외부 프로세스의 표준 출력 스트림을 읽는 스레드를 생성하고 시작한다.</li>
<li>외부 프로세스의 표준 에러 스트림을 읽기 위한 또 다른 별도의 스레드를 생성하고 시작한다.</li>
<li>두 스레드를 병렬 처리 한다.</li>
</ul>
<p>이렇게 처리하면 한 스트림의 버퍼가 가득 차 블록되더라도 다른 스트림의 데이터를 계속 읽을 수 있어 데드락을 방지할 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-redirect-error-stream">✅ Redirect Error Stream<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#-redirect-error-stream" class="hash-link" aria-label="Direct link to ✅ Redirect Error Stream" title="Direct link to ✅ Redirect Error Stream">​</a></h3>
<p>나는 이 방법을 이용해 처리했다.</p>
<p><strong>ProcessBuilder</strong>의 <code>redirectErrorStream(true)</code> 를 사용해 표준 에러 스트림을 표준 출력 스트림으로 리다이렉션 해 단일 스트림으로 모든 출력을 읽을 수 있도록 한다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">ProcessBuilder</span><span class="token plain"> pb </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">ProcessBuilder</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">pb</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">redirectErrorStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token boolean" style="color:hsl(35, 99%, 36%)">true</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 표준 에러 스트림을 표준 출력 스트림으로 리다이렉션</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>두 스트림을 하나의 스트림으로 처리하면, 표준 출력을 계속 읽어낼때 표준 에러 스트림에서 발생하는 데이터도 처리되기 때문에 버퍼를 지속적으로 비워줄 수 있다.</p>
<p>Runtime으로 작성되어 있던 코드를 ProcessBuilder를 사용하도록 해주고, <code>redirectErrorStream(true)</code> 로 설정하니 문제가 해결되었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="참고자료">참고자료<a href="https://devyuseon.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C" class="hash-link" aria-label="Direct link to 참고자료" title="Direct link to 참고자료">​</a></h2>
<ul>
<li><a href="https://d2.naver.com/helloworld/1113548" target="_blank" rel="noopener noreferrer">https://d2.naver.com/helloworld/1113548</a></li>
<li><a href="https://stackoverflow.com/questions/5483830/process-waitfor-never-returns" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/5483830/process-waitfor-never-returns</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html</a></li>
</ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring REST Docs + OAS 적용기]]></title>
        <id>https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3</id>
        <link href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3"/>
        <updated>2024-03-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Spring REST Docs + OAS 선택한 이유, 방법, 그리고 몇 가지 유용한 팁]]></summary>
        <content type="html"><![CDATA[<p>이번 프로젝트에 <strong>Spring REST Docs + OAS</strong>를 도입해본 후기 및 몇가지 팁 :)</p>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>danger</div><div class="admonitionContent_BuS1"><p><strong>restdocs-api-spec</strong> 라이브러리 사용시, <code>@ModelAttribute</code>, <code>@RequestParts</code> 에 대한 문서화가 어려운 점을 발견했습니다. 반드시 이 어노테이션이 필요한 경우, springdoc을 고려해보는게 좋을 듯 합니다 :)</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="필요성">필요성<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#%ED%95%84%EC%9A%94%EC%84%B1" class="hash-link" aria-label="Direct link to 필요성" title="Direct link to 필요성">​</a></h2>
<p>앱개발자와 협업할때 API 문서화가 필요할 것이라 생각되어 Swagger를 쓰기로 했는데, 나의 제안으로 REST DOCS + OAS를 도입하게 되었다. 이 글을 보는 사람들에게 Spring REST Docs + OAS를 팔아보려고 한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="신뢰성이-높다">신뢰성이 높다.<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#%EC%8B%A0%EB%A2%B0%EC%84%B1%EC%9D%B4-%EB%86%92%EB%8B%A4" class="hash-link" aria-label="Direct link to 신뢰성이 높다." title="Direct link to 신뢰성이 높다.">​</a></h3>
<p>REST Docs로 문서를 만들면 반드시 테스트를 통과해야 결과물이 만들어지기 때문에 신뢰성이 높다. 강력한 장점이다.</p>
<p>만약 api 수정후 swagger 관련 어노테이션을 수정하지 않으면, 실제 api와 다른 문서가 만들어진다.</p>
<p>반면 REST Docs를 적용하면 api 테스트를 거쳐야만 문서가 완성되기 때문에, 프론트엔드 개발자나 외부 REST API를 사용하는 사람들에게 더 신뢰성 있는 문서를 전달할 수 있게 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="예쁘다">예쁘다.<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#%EC%98%88%EC%81%98%EB%8B%A4" class="hash-link" aria-label="Direct link to 예쁘다." title="Direct link to 예쁘다.">​</a></h3>
<p>Spring REST Docs를 사용하면, <code>adoc</code>파일 형식으로 api 결과물이 나온다. 졸업프로젝트에서, 이 REST Docs를 도입해 모든 api에 대한 테스트를 작성하고, 자동 문서화를 적용해 매우 뿌듯한 기억이 있었다.<a href="https://2e2i.github.io/mamomo-server/" target="_blank" rel="noopener noreferrer">(🔗링크)</a> 하지만,, 정말 못생겼다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/2024-03-268.58.04-2e6ca2b2625adbbe60107aa1427e1c80.png" width="1986" height="2074" class="img_ev3q"></p>
<p>게다가 인덱싱이나 링크 등 커스텀을 하려면 한땀한땀 수정해줘야 했다. 자동화는 맞는데.. 반 자동화다.</p>
<p>반면, Swagger를 사용하면 가독성이 매우 좋은 결과물을 만들 수 있다.
게다가 <code>Try it</code> 버튼으로 API 테스트까지 할 수 있어 프론트개발자에게도 매우 편리하다. JWT 토큰을 넣어 테스트 하거나, Request 정보를 수정해서 테스트도 가능하다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/2024-03-271.31.42-03bb0f7a148e808eff92b909645c0e7e.png" width="2908" height="2008" class="img_ev3q"></p>
<p>큰 제목 아래 '.json'이나 '.yml'링크가 있는데, Swagger를 만든 원본 OpenAPI 스팩 파일이다. 이것을 다운로드 받아서 Postman으로 Import 할 수도 있다.👍</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="확장성이-좋다">확장성이 좋다.<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#%ED%99%95%EC%9E%A5%EC%84%B1%EC%9D%B4-%EC%A2%8B%EB%8B%A4" class="hash-link" aria-label="Direct link to 확장성이 좋다." title="Direct link to 확장성이 좋다.">​</a></h3>
<p>현재 멀티모듈 구조를 택해서, 모듈별로 <code>yml</code>파일이 생성된다. SwaggerUI를 활용하면 이를 통합할 수 있다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/2024-03-271.40.37-af97084922fcda25482f34fa22f198ca.png" width="2958" height="432" class="img_ev3q">
<img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/2024-03-271.40.49-6e158bd2894ae55d7e38c29156646261.png" width="2942" height="460" class="img_ev3q"></p>
<p>이렇게 통합하는 기능도 제공한다. 이러한 기능은 Spring REST Docs 뿐만 아니라, 다른 백엔드 프레임워크의 문서화 결과물도 통합할 수 있게 해준다.</p>
<p>Swagger는 OpenAPI 스팩 기반으로 만들어진다.</p>
<ul>
<li><a href="https://swagger.io/specification/" target="_blank" rel="noopener noreferrer">Swagger OpenAPI Specification</a></li>
<li><a href="https://spec.openapis.org/oas/v3.1.0" target="_blank" rel="noopener noreferrer">OpenAPI Specification 공식문서</a></li>
</ul>
<p>그래서 OpenAPI 스팩에 맞는 <code>yml</code>, <code>json</code>파일만 만들면 Swagger로 예쁘게 문서화 할 수 있다. 그렇기 때문에 Spring, Django, nest.js를 혼합해서 쓰는 프로젝트에서도 양식에 맞는 파일만 만들면 API 문서를 통합할 수 있다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/openapi3-ec1f2c231a2aa3793c1fa1935536644a.png" width="2000" height="1231" class="img_ev3q">
(사진 출처: <a href="https://velog.io/@letsdev/MSA-Swagger-UI%EB%A1%9C-API-%EB%AC%B8%EC%84%9C-%ED%86%B5%ED%95%A9-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-3-Gradle-Task-from-ePages-Plugin" target="_blank" rel="noopener noreferrer">https://velog.io/@letsdev</a>)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="spring-rest-docs에-oas-적용하기">Spring REST Docs에 OAS 적용하기<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#spring-rest-docs%EC%97%90-oas-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to Spring REST Docs에 OAS 적용하기" title="Direct link to Spring REST Docs에 OAS 적용하기">​</a></h2>
<p>Spring REST Docs에 <a href="https://github.com/ePages-de/restdocs-api-spec" target="_blank" rel="noopener noreferrer">restdocs-api-spec</a> 라이브러리를 얹으면 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dependency-추가-및-gradle-task-세팅">dependency 추가 및 gradle task 세팅<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#dependency-%EC%B6%94%EA%B0%80-%EB%B0%8F-gradle-task-%EC%84%B8%ED%8C%85" class="hash-link" aria-label="Direct link to dependency 추가 및 gradle task 세팅" title="Direct link to dependency 추가 및 gradle task 세팅">​</a></h3>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">plugins</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    id </span><span class="token string" style="color:hsl(119, 34%, 47%)">'com.epages.restdocs-api-spec'</span><span class="token plain"> version </span><span class="token string" style="color:hsl(119, 34%, 47%)">'0.19.1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">openapi3 </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    server </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'서버 주소'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    title </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'제목'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    description </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'설명'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    version </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'0.1.0(버전)'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    outputFileNamePrefix </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'파일명'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    format </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'yaml or json'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="테스트-코드-작성">테스트 코드 작성<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1" class="hash-link" aria-label="Direct link to 테스트 코드 작성" title="Direct link to 테스트 코드 작성">​</a></h3>
<p>기존 REST Docs 코드에</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">import</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">static</span><span class="token plain"> </span><span class="token import static namespace">org</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">springframework</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">restdocs</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">mockmvc</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static class-name" style="color:hsl(35, 99%, 36%)">MockMvcRestDocumentation</span><span class="token import static punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static">document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">import</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">static</span><span class="token plain"> </span><span class="token import static namespace">com</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">epages</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">restdocs</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">apispec</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static class-name" style="color:hsl(35, 99%, 36%)">MockMvcRestDocumentationWrapper</span><span class="token import static punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static">document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>MockMvcRestDocumentation</code>를 <code>MockMvcRestDocumentationWrapper</code>로 대체하면 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="결과물-생성">결과물 생성<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#%EA%B2%B0%EA%B3%BC%EB%AC%BC-%EC%83%9D%EC%84%B1" class="hash-link" aria-label="Direct link to 결과물 생성" title="Direct link to 결과물 생성">​</a></h3>
<p>OpenAPI 3.0.1 specification 으로 문서를 만드려면 다음과 같은 명령어로 yaml 혹은 json 파일을 만든다.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">./gradlew openapi3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>build 디렉토리가 없으면 오류가 나기 때문에 빌드 돌린 후 진행하면 된다.</p>
<p>/build/api-spec/에 yaml 파일이 생긴것을 확인할 수 있다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/2024-03-3011.10.03-f44454742f8a5bf3a2b021a707d18659.png" width="2360" height="1092" class="img_ev3q"></p>
<p>IntelliJ 사용시 OAS 스팩을 UI로 바로 확인할 수도 있다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="msa에서-api-문서-통합해-swagger-적용하기">MSA에서 api 문서 통합해 Swagger 적용하기<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#msa%EC%97%90%EC%84%9C-api-%EB%AC%B8%EC%84%9C-%ED%86%B5%ED%95%A9%ED%95%B4-swagger-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to MSA에서 api 문서 통합해 Swagger 적용하기" title="Direct link to MSA에서 api 문서 통합해 Swagger 적용하기">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="흩어져-있는-yaml파일-통합">흩어져 있는 yaml파일 통합<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#%ED%9D%A9%EC%96%B4%EC%A0%B8-%EC%9E%88%EB%8A%94-yaml%ED%8C%8C%EC%9D%BC-%ED%86%B5%ED%95%A9" class="hash-link" aria-label="Direct link to 흩어져 있는 yaml파일 통합" title="Direct link to 흩어져 있는 yaml파일 통합">​</a></h3>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">task </span><span class="token function" style="color:hsl(221, 87%, 60%)">copyOpenApiSpecsToDocsDir</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">type</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> Copy</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	dependsOn </span><span class="token string" style="color:hsl(119, 34%, 47%)">':api:member:openapi3'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	dependsOn </span><span class="token string" style="color:hsl(119, 34%, 47%)">':api:store:makeOpenapi'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	dependsOn </span><span class="token string" style="color:hsl(119, 34%, 47%)">':api:event:openapi3'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token comment" style="color:hsl(230, 4%, 64%)">// member</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	from </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token interpolation-string interpolation expression string" style="color:hsl(119, 34%, 47%)">':api:member'</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">buildDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/api-spec/member-openapi.yaml"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	into </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">rootDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/docs/openapi"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token comment" style="color:hsl(230, 4%, 64%)">// product</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	from </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token interpolation-string interpolation expression string" style="color:hsl(119, 34%, 47%)">':api:store'</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">buildDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/api-spec/store-openapi.yaml"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	into </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">rootDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/docs/openapi"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token comment" style="color:hsl(230, 4%, 64%)">//event</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	from </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token interpolation-string interpolation expression string" style="color:hsl(119, 34%, 47%)">':api:event'</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">buildDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/api-spec/event-openapi.yaml"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	into </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">rootDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/docs/openapi"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위 스크립트를 작성해 각 api 모듈의 빌드 디렉토리에서, 루트의 /docs로 결과물을 복사하는 task를 생성했다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">├── docs</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; ├── Dockerfile</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; ├── index.html</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; ├── openapi</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── event-openapi.yaml</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── member-openapi.yaml</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; └── store-openapi.yaml</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; └── urls.json</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>copyOpenApiSpecsToDocsDir</code>를 실행하면, /docs/openapi로 파일들이 모이게 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="swagger-적용하기">Swagger 적용하기<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#swagger-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to Swagger 적용하기" title="Direct link to Swagger 적용하기">​</a></h3>
<p>spring에서 정적 리소스를 호스팅하고 이 주소로 docker swagger 이미지를 사용해 띄우는 방법도 있지만, 서버가 가동중이 아닐때도 확인 할 수 있게 세팅하고 싶었다.</p>
<p>간단하게 Swagger의 <code>index.html</code> 만 가져와 standalone 모드로 세팅했다.</p>
<p>먼저 전체 소스코드이다. <a href="https://swagger.io/docs/open-source-tools/swagger-ui/usage/installation/" target="_blank" rel="noopener noreferrer">Swagger UI Installation</a> 참고해서 base html을 가져왔고, 조금 수정했다.</p>
<p><strong>📄 index.html 전체 소스코드</strong></p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token doctype punctuation" style="color:hsl(119, 34%, 47%)">&lt;!</span><span class="token doctype doctype-tag" style="color:hsl(230, 8%, 24%)">DOCTYPE</span><span class="token doctype" style="color:hsl(230, 8%, 24%)"> </span><span class="token doctype name" style="color:hsl(230, 8%, 24%)">html</span><span class="token doctype punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">html</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">lang</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">en</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">head</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">meta</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">charset</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">utf-8</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">meta</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">viewport</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">content</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">width=device-width, initial-scale=1</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">meta</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">description</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">content</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">SwaggerUI</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">title</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain">백투더퓨처 API Docs</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">title</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">link</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">rel</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">stylesheet</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">href</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">https://unpkg.com/swagger-ui-dist@5.11.8/swagger-ui.css</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">head</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">body</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">div</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">swagger-ui</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">div</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">src</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">https://unpkg.com/swagger-ui-dist@5.11.8/swagger-ui-bundle.js</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">crossorigin</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token script"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">src</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">https://unpkg.com/swagger-ui-dist@5.11.8/swagger-ui-standalone-preset.js</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">crossorigin</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token script"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">src</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">https://unpkg.com/axios/dist/axios.min.js</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token script"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">      window</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript function-variable function" style="color:hsl(221, 87%, 60%)">onload</span><span class="token script language-javascript"> </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript"> </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=&gt;</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">        axios</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript function" style="color:hsl(221, 87%, 60%)">get</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript string" style="color:hsl(119, 34%, 47%)">"urls.json"</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript function" style="color:hsl(221, 87%, 60%)">then</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript parameter">res</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript"> </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=&gt;</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">          </span><span class="token script language-javascript keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token script language-javascript"> urls </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token script language-javascript"> res</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript">data</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">          window</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript">ui </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token script language-javascript"> </span><span class="token script language-javascript function" style="color:hsl(221, 87%, 60%)">SwaggerUIBundle</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">urls</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> urls</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">dom_id</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript string" style="color:hsl(119, 34%, 47%)">"#swagger-ui"</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">presets</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token script language-javascript">SwaggerUIBundle</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript">presets</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript">apis</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"> SwaggerUIStandalonePreset</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">layout</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript string" style="color:hsl(119, 34%, 47%)">"StandaloneLayout"</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">queryConfigEnabled</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript boolean" style="color:hsl(35, 99%, 36%)">true</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">          </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">        </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">      </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">body</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">html</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>바꾼 부분은 다음과 같다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">axios</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"urls.json"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">then</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token parameter">res</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token plain"> urls </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> res</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    window</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">ui </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">SwaggerUIBundle</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">urls</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> urls</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 생략</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>여러 yaml 파일들을 통합하기 위해서 json파일로 목록을 작성해 index.html에서 불러올 수 있도록 했다. <code>url.json</code>은 아래처럼 생겼다.</p>
<p><strong>📄 url.json</strong></p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"url"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"./openapi/member-openapi.yaml"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"name"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"member-api"</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"url"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"./openapi/store-openapi.yaml"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"name"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"store-api"</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"url"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"./openapi/event-openapi.yaml"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"name"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"event-api"</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>url과 ui상에서 보여질 name을 설정한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="swagger-결과물을-docker-이미지로-만들기">Swagger 결과물을 Docker 이미지로 만들기<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#swagger-%EA%B2%B0%EA%B3%BC%EB%AC%BC%EC%9D%84-docker-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0" class="hash-link" aria-label="Direct link to Swagger 결과물을 Docker 이미지로 만들기" title="Direct link to Swagger 결과물을 Docker 이미지로 만들기">​</a></h3>
<p>단순하게 index.html만 띄우면 되어서, nginx이미지를 사용했다. 아래는 Dockerfile 내용이다.</p>
<div class="language-Dockerfile language-dockerfile codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dockerfile codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token instruction keyword" style="color:hsl(301, 63%, 40%)">FROM</span><span class="token instruction"> nginx:alpine</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token instruction keyword" style="color:hsl(301, 63%, 40%)">COPY</span><span class="token instruction"> . /usr/share/nginx/html/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이렇게 해서 이미지를 빌드하고 아래처럼 (docker compose 일부) 설정하면 내가 정한 포트로 접근했을때, Swagger UI를 확인할 수 있다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token key atrule" style="color:hsl(35, 99%, 36%)">swagger-ui</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token key atrule" style="color:hsl(35, 99%, 36%)">image</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> bagtothefuture</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">-</span><span class="token plain">swagger</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">latest </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># swagger 이미지</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token key atrule" style="color:hsl(35, 99%, 36%)">ports</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">-</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"8000:80"</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># 80포트를 host의 8000로 오픈</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="jwt-토큰-적용하기">JWT 토큰 적용하기<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#jwt-%ED%86%A0%ED%81%B0-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to JWT 토큰 적용하기" title="Direct link to JWT 토큰 적용하기">​</a></h2>
<p><code>requestHedaer()</code>로 작성하면 헤더 입력칸이 생기지만, Try it으로 테스트시 실제로 보내지지 않는다. 거의 모든 API가 JWT 토큰을 사용하는데, 이걸 적용하지 못한다면 Swagger를 적용하는 큰 이유가 하나 사라진다..</p>
<p>epages에서 뒤져보았는데 아직 찾지 못했다 흠..</p>
<p>그러던 참에 <a href="https://velog.io/@hwsa1004/Spring-restdocs-swagger-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" target="_blank" rel="noopener noreferrer">hwsa1004님의 블로그 글</a>을 발견해 적용해 보았다.</p>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">task makeOpenapi </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    dependsOn </span><span class="token string" style="color:hsl(119, 34%, 47%)">'openapi3'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    doFirst </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">def</span><span class="token plain"> swaggerUIFile </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">file</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression">openapi3</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">outputDirectory</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/store-openapi.yaml"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">def</span><span class="token plain"> securitySchemesContent </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">  </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"  securitySchemes:\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain">  \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"    bearerAuth:\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain">  \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"      type: http\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain">  \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"      scheme: bearer\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain">  \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"      bearerFormat: JWT\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"security:\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"  - bearerAuth: []"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        swaggerUIFile</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">append securitySchemesContent</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>직접 이부분을 문서 마지막에 추가해주는 것이다.</p>
<p>블로그와 다른 점은, <a href="https://swagger.io/docs/specification/authentication/bearer-authentication/" target="_blank" rel="noopener noreferrer">openapi3 docs</a>를 참고해, bearer 타입으로 넣은 것이다.</p>
<p>이렇게 적용하면 "Bearer "을 포함하지 않고 토큰만 입력해도 된다.</p>
<p><img decoding="async" loading="lazy" src="https://github.com/backtothefuture-team/backtothefuture-backend/assets/67352902/4cd94907-c846-4e9a-a56f-e342f934ba3a" alt="alt text" class="img_ev3q"></p>
<p>토큰을 입력하고, Authorize 버튼을 누르면 이후에 api 테스트에서 header에 토큰을 입력하지 않아도 보내지게 된다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="마무리">마무리<a href="https://devyuseon.github.io/blog/2024/03/30/springrestdocs-openapi3#%EB%A7%88%EB%AC%B4%EB%A6%AC" class="hash-link" aria-label="Direct link to 마무리" title="Direct link to 마무리">​</a></h2>
<p>프로젝트를 진행하며 Spring REST Docs + OAS를 적용해보았고, 장점이 너무나 많다고 생각되어 글을 작성하게 되었다. 하면서 공유할 팁이 더 생긴다면 내용을 추가 할 것이다.</p>
<blockquote>
<p>한 번 써보세요!! 장점이 많습니다 :)</p>
</blockquote>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[통합 접근 제어 전략을 설계 해보다.]]></title>
        <id>https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy</id>
        <link href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy"/>
        <updated>2024-03-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[흩어져 하드코딩되어 있는 권한 관리를 하나로 통합하는 설계를 진행해 보았다.]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#intro" class="hash-link" aria-label="Direct link to Intro" title="Direct link to Intro">​</a></h2>
<p>회사에서 내가 맡은 서비스의 <strong>권한 관리</strong>는 여러 곳에 흩어져 하드코딩 되어 있다. 여기서 권한 관리란 어떤 리소스에 대한 접근 권한을 말한다.</p>
<p>이때 고려되는 요소도 다양하다. 그런데 이번에 새 기능이 추가되어 더욱 더 복잡하게 관리해야 할 상황이 생겼다. REST API도 제공하게 되었다. 이에 권한 관리를 한곳에서 통합해야 할 필요가 생겼고, 이 임무가 나에게(!!) 맡겨졌다.</p>
<p>그래서 설계를 해보며 고려한 요소들과, 이 과정에서 느낀점을 정리해 보려고 한다.</p>
<div class="theme-admonition theme-admonition-warning admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>warning</div><div class="admonitionContent_BuS1"><p>조금이라도 민감할 수 있는 회사 내용을 모두 제외하였기 때문에, <strong>앙꼬없는 찐빵</strong>같은 글일 수 있습니다.</p><p><code>ROLE_</code> 형식의 권한 설계가 아닌, 다른 설계를 계획할 때 조금이라도 인사이트가 된다면 좋겠습니다. ☺️</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="고려해야-할-요소">고려해야 할 요소<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%9A%94%EC%86%8C" class="hash-link" aria-label="Direct link to 고려해야 할 요소" title="Direct link to 고려해야 할 요소">​</a></h2>
<p>사내 서비스는 망 분리가 되어 있다. 그래서 사내직원 / 외부유저가 로그인 방식이 다르고, 접근하는 도메인도 다르다. 사내직원일 경우 부서별로 어떤 리소스에 대한 접근 권한이 다르다. 특정 부서가 생성한 것은 그 부서만 수정할 수 있다던가 하는 처리가 필요하다. 외부유저일 경우 같은 회사만 열람할 수 있었다. 이걸 모두 하드코딩 하고 있었다. (if ~ else로.)</p>
<p>또, 일반적인 웹 백엔드 API 말고도 REST API 로의 접근도 제공하게 되었다. 이때 Token을 발급받은 유저만 해당 API 를 사용할 수 있다.</p>
<p>이런 요소들을 고민해야 했다. 정리하면 아래와 같다.</p>
<ul>
<li>사내직원 (Jira API 에서 로그인 정보를 가져옴) / 외부유저 (회원 관리 DB가 따로 있음)</li>
<li>사내직원 일 경우 부서 정보에 따라 접근 권한을 구분해야 함</li>
<li>외부유저일 경우 회사 정보에 따라 접근 권한을 구분해야 함</li>
</ul>
<p>지금까지 부서별 권한을 나누는 일은 없었으나, 이번에 추가되었다. Jira API는 부서 정보를 한글로 된 String으로 반환했다. 만약 조직 개편이 이루어질 경우 <strong>마이그레이션</strong> 도 고려해야 했다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="전략의-선택">전략의 선택<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EC%A0%84%EB%9E%B5%EC%9D%98-%EC%84%A0%ED%83%9D" class="hash-link" aria-label="Direct link to 전략의 선택" title="Direct link to 전략의 선택">​</a></h2>
<p>보통 권한관리 시에 Spring으로 어플리케이션을 개발하면 Spring Security로 Role을 부여하여 하곤 한다. 하지만 나의 경우 권한 관리가 이루어 지는 곳은 Express 였고, 회원 관련 정보가 우리 DB에 있는 것이 아니라 외부로부터 가져오는 정보이기 때문에 흔하게 적용하는 방법을 쉽게 쓸 수 없었다.</p>
<p>권한관리를 설계할 때 어떤 전략을 취하는지 조사를 해 보았다. <code>Role Based Access Control (역할 기반 제어)</code> 와 <code>Attribute Based Access Control (속성 기반 제어)</code> 가 가장 많이 취하는 전략이였다.</p>
<p>이 두 전략을 중심으로 설계를 했는데, 리뷰 시간에 PL분께서 인사이트를 제공해 주셔서(!) 해당 리소스별로 권한을 제어하는 방식, 내맘대로 <code>Resource Based Access Control (리소스 기반 제어)</code> 라 이름을 짓고, 이 전략도 추가로 설계했다.</p>
<p>아, 추가로 권한을 관리할 수 있는 오픈소스들 (OPA 등 ...) 이 있긴 했는데, 개발자가 나 혼자라 서비스를 하나 더 추가해 관리하는것이 부담스럽고 그렇게 큰 시스템도 아니라서 이건 제외했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="role-based-access-control-역할-기반-접근-제어">Role Based Access Control, 역할 기반 접근 제어<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#role-based-access-control-%EC%97%AD%ED%95%A0-%EA%B8%B0%EB%B0%98-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4" class="hash-link" aria-label="Direct link to Role Based Access Control, 역할 기반 접근 제어" title="Direct link to Role Based Access Control, 역할 기반 접근 제어">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징">특징<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%ED%8A%B9%EC%A7%95" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h4>
<p>역할에 따라 시스템, 리소스에 대한 사용자 접근 권한을 관리하는 방법이다. 각 개별 사용자에 대해 역할을 부여하고, 어떤 기능에 대해 허용할 역할을 나열해 제어한다.</p>
<p>역할 기반 접근 제어는 다음 특징을 가진다.</p>
<ul>
<li>각 사용자에게는 하나 이상의 역할이 할당된다.</li>
<li>사용자 역할에는 권한이 할당된다.</li>
<li>사용자가 역할을 활성 구성원이 되면 권한에 액세스 할 수 있다.</li>
</ul>
<p>예를들어, 어떤 상품을 판매하는 페이지라면, <code>ROLE_ADMIN</code>, <code>ROLE_SELLER</code>, <code>ROLE_USER</code>와 같은 역할을 정의하고, 그 역할에 따라 제어하게 된다.</p>
<p><strong>역할 정의</strong></p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token property" style="color:hsl(5, 74%, 59%)">"name"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"roles/testRole"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token property" style="color:hsl(5, 74%, 59%)">"title"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"billing role"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token property" style="color:hsl(5, 74%, 59%)">"includedPermissions"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token string" style="color:hsl(119, 34%, 47%)">"paymentStatement.list"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"usage.list"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>역할 부여</strong></p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token property" style="color:hsl(5, 74%, 59%)">"bindings"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token property" style="color:hsl(5, 74%, 59%)">"role"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"roles/testRole"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token property" style="color:hsl(5, 74%, 59%)">"members"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token string" style="color:hsl(119, 34%, 47%)">"user:viewrain@hohoho.com"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점">장점<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EC%9E%A5%EC%A0%90" class="hash-link" aria-label="Direct link to 장점" title="Direct link to 장점">​</a></h4>
<ul>
<li>권한에 대한 부여, 회수가 간편하다. 특정 권한을 부여하려면 역할을 부여하고, 뺏으려면 역할을 제거하면 된다. 따라서 유연하고 직관적인 통제가 가능하다.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="단점">단점<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EB%8B%A8%EC%A0%90" class="hash-link" aria-label="Direct link to 단점" title="Direct link to 단점">​</a></h4>
<ul>
<li>역할이 폭발적으로 늘어날 수 있다. 새 기능이 추가되고, 그 기능에만 허용되는 권한이 생긴다면 새로 역할을 정의하고 부여한다. 이런식으로 반복하면 서비스가 커질수록 그 역할도 함께 늘어난다.</li>
<li>세밀한 권한 정책을 부여할 수 없다.<!-- -->
<ul>
<li>여러 상황을 추상화해서 역할을 만들지만, 딱 맞는 역할을 정하기가 힘들다. 특정 권한에 대해 많은 고려요소가 있는 경우, 하나만 요소가 바뀌어도 다른 역할을 부여해야 하는데 그렇게 너무 작은 단위로 역할을 나누면 자주 변경하게 될 수 있다.</li>
</ul>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="우리-서비스에는-">우리 서비스에는 ...<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EC%9A%B0%EB%A6%AC-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EB%8A%94-" class="hash-link" aria-label="Direct link to 우리 서비스에는 ..." title="Direct link to 우리 서비스에는 ...">​</a></h4>
<p>적용하기 쉽지 않았다. 일단 유저에 대한 DB 정보가 우리한테 있는 것이 아니기 때문에, '회원가입' 이라는 절차가 없어 유저 정보를 기본적으로 가지고 있지 않다.</p>
<p>로그인 한 적 없는 유저가 로그인하면 자동으로 역할을 판단해 부여한다던가 하는 절차가 필요했다.</p>
<p>그리고, 부서별 역할 정의도 필요하고, 회사별 역할 정의도 필요했다. 너무 많은 역할의 정의가 필요했고, 부여하기 위한 별도 로직이 필요했다. 까딱해서 잘못 판단하면 봐야하는 유저가 못보는 정보가 생길 수도 있었다.</p>
<p>이렇게 되니 더욱 복잡해져서 이 전략은 탈락했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="attribute-based-access-control-속성-기반-접근-제어">Attribute Based Access Control, 속성 기반 접근 제어<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#attribute-based-access-control-%EC%86%8D%EC%84%B1-%EA%B8%B0%EB%B0%98-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4" class="hash-link" aria-label="Direct link to Attribute Based Access Control, 속성 기반 접근 제어" title="Direct link to Attribute Based Access Control, 속성 기반 접근 제어">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징-1">특징<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%ED%8A%B9%EC%A7%95-1" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h4>
<p>주체, 자원 또는 환경의 속성을 기반으로 접근을 제어하는 방식이다. 어떤 사람이 특정 객체에 접근하려 할때 객체의 속성, 사람의 속성, 그때의 환경 정보 등을 다양하게 고려해서 판단한다.</p>
<p>관계는 if ~ then 문으로 정의한다. 예를들면 다음과 같다.</p>
<ul>
<li>직급이 '주임' 이상이고, 접근한 ip주소가 000.000.000.000/ 대역대 이고, 해당 게시물을 작성한 사람이 같은팀 일때 액세스 가능하다.</li>
<li>회사 정책에 "토요일 휴무"로 지정되어 있는 경우, 토요일에는 누구도 파일에 액세스할 수 없습니다.
이런 정책을 모두 if ~ then 문으로 정의하는 것이다.</li>
</ul>
<p>나는 '정책' 을 저장할 json array를 정의해 하나의 object에는 리소스의 정보와, 접근하려는 유저의 정보, 최종적으로 그것을 allow 할건지 deny 할건지 결정하는 정보를 적어주었다. 예를 들면 다음과 같다.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">"id"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"policy_1"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">"description"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"A 부서가 만든 파일중 aa타입의 파일은 A 부서만 접근할 수 있습니다."</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">"condition"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token property" style="color:hsl(5, 74%, 59%)">"request"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token property" style="color:hsl(5, 74%, 59%)">"access"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"inner"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 사내직원</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token property" style="color:hsl(5, 74%, 59%)">"department"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"A"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token property" style="color:hsl(5, 74%, 59%)">"resource"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token property" style="color:hsl(5, 74%, 59%)">"department"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"A"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token property" style="color:hsl(5, 74%, 59%)">"type"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"aa"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">"action"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"allow"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 생략</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이렇게 모든 케이스를 구분해 나열해주는 것이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점-1">장점<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EC%9E%A5%EC%A0%90-1" class="hash-link" aria-label="Direct link to 장점" title="Direct link to 장점">​</a></h4>
<ul>
<li>굉장히 세밀한 접근 제어가 가능하다. 거의 모든 경우의 수를 통제할 수 있다.</li>
<li>따라서 표현성, 유연성이 매우 좋다.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="단점-1">단점<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EB%8B%A8%EC%A0%90-1" class="hash-link" aria-label="Direct link to 단점" title="Direct link to 단점">​</a></h4>
<ul>
<li>시스템 규모가 커지고, 권한에 대한 케이스가 많아질수록 성능 저하가 올 수 있다.</li>
<li>정책을 정의하는 데 많은 시간이 필요하다.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="우리-서비스에는--1">우리 서비스에는 ...<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EC%9A%B0%EB%A6%AC-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EB%8A%94--1" class="hash-link" aria-label="Direct link to 우리 서비스에는 ..." title="Direct link to 우리 서비스에는 ...">​</a></h4>
<p>리소스에 대한 종류가 다양해, 많은 케이스의 정의가 필요했다. 그렇게되면 매번 모든 정책을 훑어봐야 했다. 부서만 몇십개고, 회사는 몇천개였어서 그 정책을 다 한번씩 보는 것은 성능에 문제가 있었다.</p>
<p>그리고 개발자가 나뿐이라.. 이걸 정의할 사람도 나였고, 실수하게 되면 치명적인 문제가 발생할 것이기 때문에 결국 이것도 탈락했다.</p>
<p>그리고 조직 개편시 마이그레이션도 정책을 모두 살펴보며 String을 찾고 바꿔줘야 하는데, 정책이 많으면 마이그레이션 할때 신뢰성도 떨어지고 오래걸리기 때문에 이건 탈락했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="resource-based-access-control-리소스-기반-제어-내맘대로-명칭">Resource Based Access Control, 리소스 기반 제어 (내맘대로 명칭)<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#resource-based-access-control-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EC%A0%9C%EC%96%B4-%EB%82%B4%EB%A7%98%EB%8C%80%EB%A1%9C-%EB%AA%85%EC%B9%AD" class="hash-link" aria-label="Direct link to Resource Based Access Control, 리소스 기반 제어 (내맘대로 명칭)" title="Direct link to Resource Based Access Control, 리소스 기반 제어 (내맘대로 명칭)">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징-2">특징<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%ED%8A%B9%EC%A7%95-2" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h4>
<p>리소스의 유형을 정의하고, 그것에 대해 특정 유저를 거부할건지 허용할건지 설정해주는 방식이다. 예를 들면 다음과 같다. 회사 정보가 아닌 다른 예시라 조금 엉성할수도 있다 ..</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">"post"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token property" style="color:hsl(5, 74%, 59%)">"a"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token property" style="color:hsl(5, 74%, 59%)">"USER|kildong.hong"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token property" style="color:hsl(5, 74%, 59%)">"allow"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                    </span><span class="token string" style="color:hsl(119, 34%, 47%)">"read"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token property" style="color:hsl(5, 74%, 59%)">"deny"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                    </span><span class="token string" style="color:hsl(119, 34%, 47%)">"create"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                    </span><span class="token string" style="color:hsl(119, 34%, 47%)">"update"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                    </span><span class="token string" style="color:hsl(119, 34%, 47%)">"delete"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token property" style="color:hsl(5, 74%, 59%)">"GROUP|회계팀"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 생략</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token property" style="color:hsl(5, 74%, 59%)">"ACCESS|사내직원"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 생략</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">            </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이렇게 리소스의 유형을 정의하고, 해당 리소스에 접근할 수 있는 유저와 그 유저에게 허용된 행위 정보를 적어준다.</p>
<ul>
<li>a타입 post에 대해 홍길동 유저는 조회 가능하고, 등록 수정 삭제는 할 수 없다.</li>
</ul>
<p>와 같이 말이다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점-2">장점<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EC%9E%A5%EC%A0%90-2" class="hash-link" aria-label="Direct link to 장점" title="Direct link to 장점">​</a></h4>
<p>얼핏보면 ABAC와 비슷하다고 생각할 수 있는데, 일단 리소스의 타입별로 나누어 성능엔 조금 더 이점이 있을 수 있다. 그리고 user, group, access와 같이 prefix를 정의하고 설정해 유저의 타입을 구분한다. 한눈에 어떤 유저인지, 어떤 타입의 리소스인지 파악이 가능하다. 나중에 설정을 수정하는 어드민 페이지를 개발한다고 해도 이 편이 더 관리하기 쉬울 것이라 생각했다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="단점-2">단점<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EB%8B%A8%EC%A0%90-2" class="hash-link" aria-label="Direct link to 단점" title="Direct link to 단점">​</a></h4>
<p>이 경우에도 조직개편시 마이그레이션을 하려면 모든 정책을 한번 다 훑어야 한다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="우리-서비스에는--2">우리 서비스에는 ...<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EC%9A%B0%EB%A6%AC-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EB%8A%94--2" class="hash-link" aria-label="Direct link to 우리 서비스에는 ..." title="Direct link to 우리 서비스에는 ...">​</a></h4>
<p>위 전략들을 모두 살펴보았을 때, 복잡한 우리 서비스의 상황에 가장 알맞다고 생각했다. 유저에 대한 DB정보가 디폴트로 없는 환경에서 유저의 접속 정보와 아이디 등만 보고 판단할 수 있는 가장 좋은 방법이라고 생각했다.</p>
<p>따라서 이 전략을 더욱 더 고도화 해 적용하기로 했다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="느낀점">느낀점<a href="https://devyuseon.github.io/blog/2024/03/11/design-access-control-strategy#%EB%8A%90%EB%82%80%EC%A0%90" class="hash-link" aria-label="Direct link to 느낀점" title="Direct link to 느낀점">​</a></h2>
<p>모든 전략을 살펴볼 때, 간단한 샘플 코드를 작성했다. 정책을 정의하고, 그것을 판단하는 코드를 작성해보고, 실제로 호출도 해보았다.</p>
<p>그렇게 해보며 내가 글로 적은 설계와 코드간의 차이가 무엇인지 파악할 수 있었고 실현 가능성을 판단하는 데에도 도움이 되었다. 실제 구현했을때 코드가 예쁘게 짜지는지 알 수 있었다.</p>
<p>시간은 좀 더 걸렸을 지라도, 실제로 적용해야 하는 사안이기 때문에 신중히 결정하려면 필요한 과정이였다고 생각한다.</p>
<p>이 설계를 진행하면서 기술적인 부분 말고도, 커뮤니케이션에 대한 깨달음도 있었다. 나와 PL분 둘이서 설계-리뷰를 진행했다. 리뷰를 진행하고 다시 설계를 보완해 오는 과정에서, 리뷰에서의 PL님의 말씀과 나의 이해가 다른 경우가 있었다. 내가 이해한 줄 알았는데, 아니였던 거다. 이걸 확인하는 과정이 없다면 그걸 바탕으로 설계하고, 다른 것을 다음 리뷰때 확인하기 때문에 시간을 낭비하게 되었다.</p>
<p>한번 그런 뒤로는 리뷰 받은 후 내가 이해한 것이 맞는지 정리해서 한번 확인을 요청드렸다. 이렇게 하니까 나도 더 안심이 되었고 쓸데없는 시간 낭비를 줄일 수 있었다.</p>
<p>이 설계를 경험하면서 시스템에 대한 이해도도 더 높아졌다. 그동안은 뭉뚱그려 알고있었던 것들을 확실히 문서로 적어보면서, 정확하게 파악할 수 있었다. 그리고 하드코딩된 소스들을 살펴보며 버그도 발견할 수 있었다.</p>
<p>팀에 웹개발자가 없어(지금은 나뿐,,) 어려울 때도 있지만, 1년차도 안되었는데 이런 설계도 경험할 수 있는 것은 장점이고, 또 내 의견을 표출해볼 수 있는 것도 장점이다. (시간상 못하는게 더 많지만 ..) 아무튼 좋은 경험이였다. 권한이라 함은 무조건 ROLE_ 이렇게 설정하는 줄 알았는데 새로운 접근 방식을 많이 알게 되었다. 얻어가는 게 꽤 많았던 경험이다.</p>
<h1>레퍼런스</h1>
<ul>
<li><a href="https://www.samsungsds.com/kr/insights/cloud_platform_manage.html" target="_blank" rel="noopener noreferrer">https://www.samsungsds.com/kr/insights/cloud_platform_manage.html</a></li>
<li><a href="https://www.okta.com/kr/identity-101/role-based-access-control-vs-attribute-based-access-control/" target="_blank" rel="noopener noreferrer">https://www.okta.com/kr/identity-101/role-based-access-control-vs-attribute-based-access-control/</a></li>
</ul>]]></content>
        <category label="design" term="design"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023 회고]]></title>
        <id>https://devyuseon.github.io/blog/2024/02/13/2023-retrospect</id>
        <link href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect"/>
        <updated>2024-02-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[벌써 2월이지만 2023년 회고를 써본다.]]></summary>
        <content type="html"><![CDATA[<p>요즘 회사 업무 외에도 개인 공부를 점점 늘려가고 있다. 프로젝트도 새로 시작 하고, 스터디도 참여하며
바쁜 시간을 보내고 있다. 블로그도 흔한 기술지식 복제 블로그 보다 나만의 생각을 공유하는 공간으로 만들고 싶어
새로 개설했다. 훗날 내가 바라던 모습이 되어 이때의 나를 다시 복기하기 위해서 2023~2024초 회고를 남긴다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="취업">취업<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EC%B7%A8%EC%97%85" class="hash-link" aria-label="Direct link to 취업" title="Direct link to 취업">​</a></h2>
<p>2023년 상반기, 이제 막 상반기 서류 발표가 될 쯔음에 운좋게 안랩에 합격해 재직중이다.</p>
<p>바랐던 꿈의 회사는 아니지만, 꿈의 장소였던 판교에 어찌저찌 입성하게 되었다. 첫 3달은 OJT 과정을 하면서
업무에 필요한 지식을 익히는 시간을 가졌다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="처음-배운-것들-">처음 배운 것들 ..<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EC%B2%98%EC%9D%8C-%EB%B0%B0%EC%9A%B4-%EA%B2%83%EB%93%A4-" class="hash-link" aria-label="Direct link to 처음 배운 것들 .." title="Direct link to 처음 배운 것들 ..">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="angularjs">Angular.js<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#angularjs" class="hash-link" aria-label="Direct link to Angular.js" title="Direct link to Angular.js">​</a></h4>
<p>백엔드 개발자여도 프론트 개발은 할 줄 알아야 한다는 생각에, 호기롭게 풀스택 포지션에 지원했다.
React나 Vue같은 기술을 배울 줄 알았지만.. Angular.js와 친해져야 했다.
모든 레퍼런스(스택오버플로우, 심지어는 공식문서, 블로그 등등...)가 2015-2016에 멈춰있었다.
프론트 개발도 처음이였어서 공부 방법 자체를 잘 몰랐다. 그리고 <del>이미 없어진거나 다름없는</del>
Angular.js와 그다지 친해지고 싶지 않았다. 깊게 알아서 Angular.js 마스터가 되어도
앞으로 써먹을 일이 크게 없다고 생각했다. 하지만 당장 업무를 해내야 하기 때문에 A to Z로 공부하는 방법이 아니라,
회사 소스코드를 먼저 보고 거기에 쓰인 기술과 문법을 찾아보는 방식을 선택했다.
콘솔로그를 이곳 저곳 찍어보며 이 버튼은 어떻게 동작하는지, 이 부분은 언제 렌더링 되는지,
이걸 눌렀을때 데이터가 어떻게 바뀌는지 하나하나 찾아보았다. 양이 꽤 많았지만, 감사하게도 OJT라는 시간을 주셔서
코드 전반적으로 거의 한번은 다 보고 업무를 시작할 수 있게 되었다. 그렇게 몇개월동안 프론트 운영 업무도 완벽히 수행해냈다.
원하던 커리어 방향은 아니지만, 어쨌든 주어진 것을 해낼 수 있는 사람은 된 것 같다.</p>
<p>그리고 지금은 React로 전환 예정에 있어서, 회사에서 React를 공부중이다. 그동안 아무 생각 없이 양방향 데이터 바인딩 방식인
Angular.js만 써오다가 단방향 방식인 React로 뭘 만들려니 쉽지는 않다.</p>
<p>하지만 하면 할수록 백엔드를 더 열심히 하고 싶다는 생각이 든다... 어쩔 수 없다보다.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="nodejs-express">Node.js, Express<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#nodejs-express" class="hash-link" aria-label="Direct link to Node.js, Express" title="Direct link to Node.js, Express">​</a></h4>
<p>Java와 Spring만 공부해왔던 터라, Node.js와 Express 기반으로
개발 하는 것은 나름의 도전이였다. Javascript와도 매우 .. 친하지 않아 많이 낯설었다.
promise라던가, 비동기 라던가,, 이런 개념들을 새로 배울 수 있었다.
Spring 진영에선 비동기 처리를 위해서 Spring WebFlux나 @Async로 처리를 해줘야 하는 것으로 아는데,
Node.js 환경에선 그런 추가적인 장치 없이 비동기 프로그래밍이 가능한 것이 매력적인 것 같다.
아직 모든 것을 다 이해하지는 못했지만 궁금한것을 찾아보며 하나씩 이해중이다.
싱글스레드 방식이지만 요청이 Blocking I/O(네트워크, 파일)일 경우 별도의 스레드에서 처리하게 된다.
어떤 서비스이냐에 따라 노드를 채택하는것이 더 좋을 수 있을 것 같다.
그동안 Spring이 최고! 인줄 알았는데, 노드를 새로 공부하면서 둘의 장단점에 대해 조금은 알게 되었다.
라고 말하면서.. 개인적으로는 Spring을 공부하고 있다. 아무래도 시장은 아직 Spring 진영인 것 같기 때문이다. 그렇지만 필요할때 언제든 node나 파이썬을 도입해서 써볼 열린 마음은 준비되어 있다. :)</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="docker">Docker<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#docker" class="hash-link" aria-label="Direct link to Docker" title="Direct link to Docker">​</a></h4>
<p>도커도 입사후에 처음 공부했다. 도커는 정의와 개념부터 찬찬히 공부했다. 도커 공부는 공식문서를 가장 많이 참고했다.
공부 후에는 Docker와 Container란?, Dockerfile, Docker Compose, 이미지 최적화, Volume, 네트워크 등의 주제로 나누어 6개정도 글을 작성했고 이를 발표하는 시간을 가졌다.
추가적으로 더 다듬어 블로그에도 업로드 했는데, 이 블로그로 시간이 생기면 옮겨올 생각이다.
회사 프로젝트가 리눅스 기반이라 로컬 환경이 구축되어 있지 않았다. 파일 경로나 명령어 등이 리눅스 기준이여서 로컬에서 개발이 불가능했다. Docker Desktop이 유료화 되어 삭제해달라는 전사 메일을 받아
WSL로 로컬 개발환경을 구축해 공유했다. RockyLinux 8버전을 쓰고 있는데, 이건 마이크로소프트가 제공해주지 않아 도커 컨테이너에서 추출해야 했다. 이 가이드 문서도 작성해 파트에 공유했다.</p>
<p>아직 완벽히 이해하지 못했지만, Docker와 Docker Swarm, Ansible, Bamboo를 이용한 빌드/배포
운영은 할 수 있게 되었다. 입사 할 당시엔 빌드 배포 부분이 가장 이해가 안되고 어려웠다. 그래도 흐름정도는 알게 된 것이 올해 가장 큰 수확인 듯 하다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="그리고-">그리고 ..<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EA%B7%B8%EB%A6%AC%EA%B3%A0-" class="hash-link" aria-label="Direct link to 그리고 .." title="Direct link to 그리고 ..">​</a></h3>
<p>내 생각과 회사의 방향, 그리고 성향(?)은 많이 달랐다. 여긴 좀 안정적인 느낌이고 내가 그리던 활발한, 서로 함께하고 공유하는 문화를 가진 그런 개발과는 거리가 좀 있는 듯 했다. 내가 맡은 프로젝트는 나 포함 개발자가 두명 뿐이라.. 좋은 시니어들이 많은 회사에 가고싶다는 생각을 했다. 물론 여기도 훌륭한 개발자들이 많다. 그러나 우리 팀은 총 15명인데, 그중 웹개발자는 나포함 두명이다. 회의를 할때나
기술 공유 세션을 가질때 앉아있기 민망하다는 생각도 가끔 한다. 개발자는 폭넓게 알아야 하지만
윈도우 개발, 리눅스 커널 개발?, 암호학(??정수론???) 까지는 내가 품을 수 없을 것 같다..
아무튼 그런 분들이 서로 토론하면서 지식을 나누는 대화를 하는 것을 보면.. 나도 끼고싶다는 생각을 많이 한다. 환경적인것을 탓하는 것은 나쁜 것이지만 그래도 웹개발자가 많은 곳에서 일하면 내가 흡수할 수 있는 지식이 아무래도 많지 않을까? 좋은 코드든 나쁜 코드든 다양한 사람들의 코드도 보고 싶다. 그리고 내가 작성한 코드에 대해 다양한 사람들의 의견도 들어보고 싶다. 이제 다음주부턴 혼자 일하게 된다.. 휴직을 하게 되셔서 혼자가 되었다. 이제 운영업무도 더 늘어날 것 같다. 빨리 할거 다 해버리고 하고싶은거 하게 해달라고 해야지..</p>
<p>회사에서 하는 일이 내가 하고싶은 기술스택과는 상이했고, 내가 바랐던 개발자의 삶이 맞나 싶어서 몇달은 좀 우울해 했었다. 지금은 다 극복하고 오히려 더 열심히 달리는 중이다. 우울해 할 시간이 어디있나.. 공부해야 한다..!! 요즘 개발자의 기준이 점점 상향되고 있는 것을 느낀다. 시간이 갈 수록 더 많이 알아야 되는 것 같다. 다행히도 공부는 즐겁다. 알아가는 즐거움이란 개발자에게 가장 큰 재능(?) 이 아닐까 싶은데, 다행히도 갖춘 듯 하다. 힘든데, 재밌다. 모르는게 많아서 늘 괴롭기도 하다..</p>
<p>일을 하며 더욱 더 알게 된 것인데, 나는 아무래도 관종인 듯 하다. 사람들이 쓰는 것을 개발하는게 좋고,
세상에 나와있어 이거 내가 개발했어요~ 하는 것이 좋다. 아무래도 사내 서비스다 보니 재미가 좀 떨어진다. 제품 개발을 하는 팀이였으면 좀 더 재밌었을지도 모른다. 집 좀 못가도 그런 개발을 해보고 싶다.
언젠간 서비스 회사를 가고 싶다. 그게 나에게 더 보람을 가져다 줄 것 같다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="졸업">졸업<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EC%A1%B8%EC%97%85" class="hash-link" aria-label="Direct link to 졸업" title="Direct link to 졸업">​</a></h2>
<div style="text-align:justify;width:40%"><p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/202402140133-571eec02d022bb580f657e8ca23be10e.jpeg" width="1170" height="2080" class="img_ev3q"></p></div>
<p>졸업을 했다. 코로나 학번이라 컴퓨터공학과 친구들을 많이 사귀지 못한 것이 아쉽다.. 자율공학부였던 터라, 1학년은 컴공이 아니였기 때문이다. 그럼에도 불구하고 좋은 친구들을 많이 사귀었다. 친구 없다고 생각했는데 이렇게 예쁜 꽃다발을 많이 받은걸 보면 그렇게 잘못 산건 아니였구나 생각이 든다 ㅋㅋ 졸업 유예를 한 상태에서 취업한 터라, 회사를 다니다가 졸업을 하게 되었다. 난 정말 취업하려면 1년 반은 걸릴 줄 알았다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="자취">자취<a href="https://devyuseon.github.io/blog/2024/02/13/2023-retrospect#%EC%9E%90%EC%B7%A8" class="hash-link" aria-label="Direct link to 자취" title="Direct link to 자취">​</a></h2>
<p>본가는 성북구인지라, 판교는 좀 멀었다. 솔직히 다닐 수는 있었지만 핑계로 자취를 하겠다고 강력하게 주장했고, 정자역 주변에서 자취를 시작하게 되었다. 오래된 아파트이지만 19평이라 비좁거나 하지는 않다. 이번에 이사오면서 M7 스마트모니터도 샀는데, 아주 만족한다. 본가에서는 없었던 나만의 티비가 생겼다. 누워서 OTT 보는 행복이란.. 식탁도 사고 소파도 사고 커튼도 달고, 아주 만족하고 있다. 처음엔 너무 외로워서 힘들었는데 이젠 좀 적응되었다. 청소하는 즐거움도 알게 되었다ㅋㅋ 한번 화장실 청소 시작하면 집착적으로 1시간은 청소한다.</p>
<h1>끝내며</h1>
<p>다시 공부를 시작해 이것저것 열심히 하는 중이다. 회사에서 이룰 수 없다면 개인적으로 공부를 통해서 이것저것 쌓아 나가야 겠다는 생각이다. 물론 회사에서도 집중해서 일을 정확하고 빠르게 끝내고, 내가 개인적으로 하고 싶었던 것들을 하겠다고 도전해볼 생각이다. 회고는 처음 써보는데 이렇게 쓰는게 맞는 지는 모르겠다. 나중에 다시 읽어보려고 한번 써봤다. 그럼 .. 이상 끝.</p>]]></content>
        <category label="retrospect" term="retrospect"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TroubleShooting] express가 응답을 보내지 않았다. 왜..?]]></title>
        <id>https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response</id>
        <link href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response"/>
        <updated>2024-02-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 문제 상황" title="Direct link to 문제 상황">​</a></h2>
<p>문제 상황이 무엇인지 설명하기 전에, 우리 서비스는 파일을 <code>등록</code> 하는 기능이 있고, 똑같은 파일을 중복으로 등록할 수 없다. 중복 등록을 시도할 경우엔 메세지가 뜨며 등록이 안된다.</p>
<p>그런데 사용자로부터 이런 연락을 받았다.</p>
<blockquote>
<p>파일을 업로드 하고, <code>등록</code> 버튼을 눌렀는데 <strong>등록에 실패</strong> 했다는 메시지가 떴습니다.<br>
그래서 다시 등록을 시도했는데, <strong>중복 등록</strong> 이라고 하며 등록이 되지 않았습니다. <br>
확인해보니 처음에 등록한 리포트가 잘 등록이 되어 있네요?</p>
</blockquote>
<p>그러니까, 실패했다는 메세지가 떴는데 실제론 성공했다는 거다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="증상-파악">증상 파악<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EC%A6%9D%EC%83%81-%ED%8C%8C%EC%95%85" class="hash-link" aria-label="Direct link to 증상 파악" title="Direct link to 증상 파악">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/diagram1-a15ada59da32d02e605b9bbf0305a1fa.png" width="1469" height="287" class="img_ev3q"></p>
<p>등록 기능 프로세스는 이렇다. express에서 요청을 전달하고, spring에서 등록 과정을 수행하고, 그것을 다시 express에 넘기고, express는 클라이언트에 완료를 전달한다.</p>
<p>로그를 살펴보니, <strong>express가 client로 등록 완료 전달</strong> 하는 부분 외에는 모두 success, 200으로 에러 없이 잘 수행되었다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/diagram2-e6f4ff2dbd839a5d213a07cdb152183e.png" width="1469" height="287" class="img_ev3q"></p>
<p><strong>express가 client로 등록 완료 전달</strong> 하는 부분은 ? 로 남았다. 이런 로그를 발견했기 때문이다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[시간] "POST /api/*** HTTP/1.1" - - "출처" "클라이언트 정보" - - ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 로그는 express의 <a href="https://expressjs.com/en/resources/middleware/morgan.html" target="_blank" rel="noopener noreferrer">morgan</a> 미들웨어가 남긴 로그이다. 원래라면 아래처럼 응답시간, 응답크기, 걸린시간이 표시 되어야 한다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[시간] "POST /api/*** HTTP/1.1" 200 49 "출처" "클라이언트 정보" - 317.922 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>뭔가 응답이 정상적으로 처리되지 않은 듯 했다.</p>
<p>그러나 미스테리인 점은 .. express가 <code>await</code> 으로 spring의 응답을 기다리고, 그 뒤에 성공했을땐 로그를 남기게 되어 있는데, 그 로그는 남았다는 것이다.</p>
<p>express에 에러는 없었고, spring에도 에러는 없었는데, 클라이언트에 응답 전송만 정상적으로 되지 않았다.</p>
<p>찾아보니, 위 -- 로 처리된 로그는 express가 응답 자체를 하지 않았을 때 일어나는 일이라고 한다.</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging</a> &gt; <a href="https://github.com/expressjs/morgan/issues/121" target="_blank" rel="noopener noreferrer">https://github.com/expressjs/morgan/issues/121</a></p>
</blockquote>
<p>위 링크에서 추정한 원인은 다음과 같다.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>아마도..</div><div class="admonitionContent_BuS1"><p>response를 보내기 전에 TCP 연결이 끊어진 듯!</p></div></div>
<p>로그 시간을 파악해보니 클라이언트 요청 ~ spring의 응답 까지는 1분 5초 내외로 소요되었다.</p>
<p>그렇다면 어디서 TCP 연결을 해제했을까?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="원인-파악">원인 파악<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EC%9B%90%EC%9D%B8-%ED%8C%8C%EC%95%85" class="hash-link" aria-label="Direct link to 원인 파악" title="Direct link to 원인 파악">​</a></h2>
<p>내가 의심한 것들은 다음과 같다.</p>
<ul>
<li>axios timeout</li>
<li>node.js timeout</li>
<li>OS의 TCP timeout</li>
<li>L4 스위치 timeout</li>
<li>Nginx timeout</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="axios-timeout">axios timeout<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#axios-timeout" class="hash-link" aria-label="Direct link to axios timeout" title="Direct link to axios timeout">​</a></h3>
<p>따로 설정한 것이 없다. <a href="https://github.com/axios/axios/blob/main/README.md#request-config" target="_blank" rel="noopener noreferrer">default는 no timeout</a> 이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nodejs-timeout">node.js timeout<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#nodejs-timeout" class="hash-link" aria-label="Direct link to node.js timeout" title="Direct link to node.js timeout">​</a></h3>
<p>노드13 버전 이후로는 no timeout이다.</p>
<p>노드8 버전을 쓰는 우리 프로젝트는 120s가 기본으로 설정 되어 있다. (처음알았다 ..)</p>
<blockquote>
<p><a href="https://nodejs.org/api/http.html#servertimeout" target="_blank" rel="noopener noreferrer">https://nodejs.org/api/http.html#servertimeout</a></p>
</blockquote>
<p>그러나 2분 보다 오래 걸리진 않았으므로 이것도 아니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="os의-tcp-timeout">OS의 TCP timeout<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#os%EC%9D%98-tcp-timeout" class="hash-link" aria-label="Direct link to OS의 TCP timeout" title="Direct link to OS의 TCP timeout">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">cat /proc/sys/net/ipv4/tcp_keepalive_time</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>tcp_keepalive : tcp 연결이 되고 나서 얼마나 그 연결을 지속하는지</li>
</ul>
<p>7200(2시간) 으로 널널했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="l4-스위치">L4 스위치<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#l4-%EC%8A%A4%EC%9C%84%EC%B9%98" class="hash-link" aria-label="Direct link to L4 스위치" title="Direct link to L4 스위치">​</a></h3>
<p>L4 에서도 뭔가 타임아웃이 걸려있는것은 아닐까..? 하고 해당 사항을 인프라팀에 문의했는데</p>
<p>아니다. (<del>의심해서 죄송합니다...</del>)</p>
<p>전에도 L4 설정 문제때문에 안된 기능이 있어서, 생각났었는데 .. 어쨌든 이게 문제는 아니였다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nginx-timeout">Nginx timeout<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#nginx-timeout" class="hash-link" aria-label="Direct link to Nginx timeout" title="Direct link to Nginx timeout">​</a></h3>
<div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockTitle_Ktv7">/etc/nginx/nginx.conf</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">proxy_connection_timeout</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">proxy_send_timeout</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">proxy_read_timeout</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">send_timeout</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>여기였다 !!</p>
<p>nginx로 리버스 프록시 설정이 되어 있는데, <a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener noreferrer">nginx 공식문서</a>를 보면 위 설정들의 기본 timeout이 60s로 잡혀있다.</p>
<p>이 사실을 알고 난 뒤 nginx 에러 로그를 보니 (로그 경로는 nginx.conf 에 있다.)</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockTitle_Ktv7">error.log</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[error] upstream timed out (110: Connection timed out) while reading response header from upstream .. 생략</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>connection timeout 에러 로그가 찍혔다.</p>
<p>spring이 express로 응답을 보내, express가 client에 응답하기 전에 client와 express간의 연결이 끊어져 client가 응답을 받지 못한 것이다.</p>
<p>항상 도커가 수집한 express 로그만 들여다봤지, nginx의 로그를 봐야한다는 사실을 인지하지 못했다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결">해결<a href="https://devyuseon.github.io/blog/2024/02/04/troubleshooting-express-no-response#%ED%95%B4%EA%B2%B0" class="hash-link" aria-label="Direct link to 해결" title="Direct link to 해결">​</a></h2>
<p>해결 방법으로는 이런 것들이 있겠다.</p>
<ul>
<li>timeout 늘리기</li>
<li>upstream인 spring 서버의 처리 성능 향상하기 (best)</li>
</ul>
<p>그리고 nginx 로그는 도커 컨테이너 안에 있어서, 컨테이너가 내려가면 로그 파일이 날아가 볼 수 없다.
도커 컨테이너에서 쌓은 로그는 volume으로 연결해 host에도 쌓게 해놨다. nginx 로그도 표준 출력으로 내보내 (/dev/stdout 으로 심볼릭 링크 걸기) 도커가 로그를 수집하게 하거나 nginx 로그를 volume으로 설정해 보관 할 필요가 있다.</p>
<p>일단 timeout을 늘려서 급한 불을 끄고, spring 서버의 처리 성능을 높일 방법을 생각 해 볼 것이다.</p>
<p>적고보니 별일 아닌 듯 하지만,, 의미 있었던 과정이였다.</p>
<p>이 이슈로 인해 우리 서비스의 어떤 부분에 timeout이 얼만큼 걸려있는지 확인 할 수 있었고, 로그도 좀 더 보충할 수 있었다. 다음에 이러한 일이 발생하면 이 경험으로 인해 원인 파악을 조금은 빨리 할 수 있을까 기대해보며 글을 마친다.</p>]]></content>
        <category label="troubleshooting" term="troubleshooting"/>
        <category label="express" term="express"/>
        <category label="nginx" term="nginx"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[오픈소스 첫 기여 ✨]]></title>
        <id>https://devyuseon.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose</id>
        <link href="https://devyuseon.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose"/>
        <updated>2024-01-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !]]></summary>
        <content type="html"><![CDATA[<p>비록 공식문서의 오류를 고치는 일이였지만,</p>
<p>처음으로 오픈소스에 기여했고 무려 Docker 문서 이다!!</p>
<p>머지 되었을때는 정말 뿌듯했고 이슈를 생성하고 PR을 날리는 과정도 재밌었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-발견-이슈-생성">문제 발견, 이슈 생성<a href="https://devyuseon.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose#%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EA%B2%AC-%EC%9D%B4%EC%8A%88-%EC%83%9D%EC%84%B1" class="hash-link" aria-label="Direct link to 문제 발견, 이슈 생성" title="Direct link to 문제 발견, 이슈 생성">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204509-f2e74099202853e823cb78732f5ca801.png" width="1280" height="1272" class="img_ev3q"></p>
<p>문서에 틀린 부분을 발견하고, 이슈를 생성했다.</p>
<p>수정이 필요한게 맞다면 내가 작업해도 되는지 물어봤다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204536-7317bcba405665632247d11e27f21bee.png" width="1280" height="325" class="img_ev3q"></p>
<p>assgin 해주셨고, 문서 위치가 바뀌었으니 compose-spec 레포지토리에서 PR을 해달라는 친절한 가이드까지 주셨다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pull-request-생성하기">Pull Request 생성하기<a href="https://devyuseon.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose#pull-request-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to Pull Request 생성하기" title="Direct link to Pull Request 생성하기">​</a></h2>
<p>먼저 compose-spec을 fork하고, 소스코드 수정 후 commit 했다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204610-5413e3c821b694c110606f39d3151d90.png" width="1280" height="555" class="img_ev3q"></p>
<p>다시 upstream으로&nbsp;와서 pull request를 생성했다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204624-fdecc28aa37fba29ed24fe8cd9f58c4d.png" width="1280" height="977" class="img_ev3q"></p>
<p>이건 내가 CONTRIBUTING.md를 꼼꼼히 보지 않아 생긴 일이다. ㅜㅜ</p>
<p>그냥 커밋할때 계정 정보를 확인해달라는 말인 줄 알았는데,</p>
<p>커밋 메세지에 sign-off를 포함하지 않으면 DCO check에 실패 하면서 오류가 난다.</p>
<p>친절히 알려주셔서 커밋 메세지 수정 후 강제 푸시했고,</p>
<p>이후 빌드에 한 번 실패해 한가지 수정을 더 하고 머지되었다.</p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204639-c07af163ab852efa41e6921ac7434576.png" width="1600" height="348" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205204646-5fb251394303ed66639c4a7d58982e93.png" width="910" height="492" class="img_ev3q"></p>
<p>이렇게&nbsp;오픈소스 기여에 작지만 위대한 첫 걸음을 내딛었다.</p>
<p>앞으로도 문서 뿐만 아니라 코드 레벨까지 .. 더 많은 오픈소스에 기여할 수 있게 되면 좋겠다.</p>]]></content>
        <category label="docker" term="docker"/>
        <category label="opensource-contributions" term="opensource-contributions"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Java] 에러 메시지, Stacktrace가 생략되는 문제]]></title>
        <id>https://devyuseon.github.io/blog/2024/01/02/java-no-stacktrace</id>
        <link href="https://devyuseon.github.io/blog/2024/01/02/java-no-stacktrace"/>
        <updated>2024-01-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[NullPointerException의 에러 메시지가 빈 채로 출력된다]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://devyuseon.github.io/blog/2024/01/02/java-no-stacktrace#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 문제 상황" title="Direct link to 문제 상황">​</a></h2>
<p>테스트 스크립트를 배포시에 실행하게 되어 있는데, 해당 스클립트는 같은 api를 여러 case로 몇십번 호출한다.</p>
<p>최초 실행시에는 성공하고,</p>
<p>두번째 이후부턴 실패한다.</p>
<p>지금까지는 서비스 실행시 한번만 실행했어서 발견을 못 한 문제였다.</p>
<p>에러가 발생한 지점은 여기였다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Exception</span><span class="token plain"> e</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> msg </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getMessage</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// errMsg: null</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">equalsIgnoreCase</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"XXX"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// NullPointerException 발생!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>try ~ catch 문에서 에러 메세지를 가져와 어떤 에러 메시지인지 판단하려고 할 때, <code>e.getMessage()</code> 결과가&nbsp;<strong>null</strong>&nbsp;이 되어 catch 구문에서 다시 에러가 발생하는 것이였다.</p>
<p>로직을 살펴보니 특정 case엔 무조건 try쪽에서 NPE가 발생하고, catch문으로 들어오게 되어있었다.</p>
<p>근데 왜 최초 실행시엔 msg가 null이 아닌가..???!!!</p>
<p>해당 현상을 재현한 뒤에 최초 실행 / 이후 실행에 대한 에러를 출력해 보았다.</p>
<p><strong>최초</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">class java.lang.NullPointerException: Cannot invoke "Object.toString()" because of "java.util.Map.get(Object) is null</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">// 굉장히 긴 StackTrace</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>두번째~</strong></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token plain"> </span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">java</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">lang</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">NullPointerException</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">null</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>나는 내가 로직 어딘가에 NPE가 발생하는 원인을 놓친줄 알고 며칠을 삽질했는데, 스택오버플로우에서 이 글을 발견했다.</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace</a></p>
</blockquote>
<p>관련해서 간략하게&nbsp;조사해 보았다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="jvm-stacktrace-생략">JVM Stacktrace 생략<a href="https://devyuseon.github.io/blog/2024/01/02/java-no-stacktrace#jvm-stacktrace-%EC%83%9D%EB%9E%B5" class="hash-link" aria-label="Direct link to JVM Stacktrace 생략" title="Direct link to JVM Stacktrace 생략">​</a></h2>
<p><a href="https://www.oracle.com/java/technologies/javase/release-notes-introduction.html" target="_blank" rel="noopener noreferrer">JDK5 릴리즈 노트</a>를 보면 Exception이 반복적으로 발생할 때, 컴파일러는 StackTrace를 출력하는것을 멈춘다고 한다.</p>
<p>이것은 JVM의 JIT컴파일러의 C2컴파일러의 기본 최적화 옵션 이라고 한다.</p>
<p><a href="https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L528" target="_blank" rel="noopener noreferrer">OpenJDK의 소스 코드</a>를 보면 다음 다섯가지 Exception에 대해 최적화 옵션이 적용된다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p><strong>Stacktrace 생략 최적화 옵션 적용되는 Exception</strong></p><ul>
<li>NullPointerException</li>
<li>ArithmeticException</li>
<li>ArrayIndexOutOfBoundsException</li>
<li>ClassCastException</li>
<li>ArrayStoreException</li>
</ul></div></div>
<p><img decoding="async" loading="lazy" src="https://devyuseon.github.io/assets/images/20240205210954-daea46cab06af5c5a21bd4ebeeaf3713.png" width="1234" height="1556" class="img_ev3q"></p>
<p>최적화 옵션을 비활성화 하려면 아래 JVM 옵션을&nbsp;추가해 주면 된다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">-XX:-OmitStackTraceInFastThrow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>하지만 이는 성능 최적화를 위한 옵션으로, 해당 Exception이 반복적으로 일어나지 않게끔 처리 하는것이 올바른 방향 일 것이다.</p>
<p>Exception 처리에 대한 최적화를 하는 이유가 궁금해서 찾아보았다.</p>
<p>Java에서 Exception을 던지는 비용은 꽤 비싸다고 한다. Exception이 발생하면 해당 예외가 어디서 발생했는지 추적하며 정보를 수집하고 Stack Trace를 생성한다. 이를 계산하는데에도 시간이 꽤 걸린.</p>
<p>또, 예외 객체를 새로 생성하고 초기화 하는 과정이 반복되기 때문에 좋지 않다. 그리고 Exception이 발생하면 그것이 어떤 예외인지 적절한 예외 핸들러를 찾아 리턴해줘야 하는데, 예외 핸들러를 찾는 과정 또한 오래 걸린다.</p>
<p>프로젝트를 할 때도, 적절한 예외 상황에 Custom Exception을 던지곤 했는데, 이게 맞는 방법인지 생각해볼 필요가 있는 듯 하다.</p>
<p>그리고 스택 추적이 필요하지 않은 경우라면 override를 통해 trace를 담지 않도록 하는 방법도 좋겠다.</p>]]></content>
        <category label="java" term="java"/>
    </entry>
</feed>