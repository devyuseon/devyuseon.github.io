{
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "/2024/03/11/design-access-control-strategy",
          "metadata": {
            "permalink": "/blog/2024/03/11/design-access-control-strategy",
            "source": "@site/blog/2024-03-11-design-access-control-strategy.md",
            "title": "통합 접근 제어 전략을 설계 해보다.",
            "description": "흩어져 하드코딩되어 있는 권한 관리를 하나로 통합하는 설계를 진행해 보았다.",
            "date": "2024-03-11T00:00:00.000Z",
            "formattedDate": "March 11, 2024",
            "tags": [
              {
                "label": "design",
                "permalink": "/blog/tags/design"
              }
            ],
            "readingTime": 16.945,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "yuseonLim",
                "title": "BackEnd Engineer",
                "url": "https://github.com/devyuseon",
                "imageURL": "https://avatars.githubusercontent.com/u/67352902?v=4",
                "key": "yuseonLim"
              }
            ],
            "frontMatter": {
              "title": "통합 접근 제어 전략을 설계 해보다.",
              "description": "흩어져 하드코딩되어 있는 권한 관리를 하나로 통합하는 설계를 진행해 보았다.",
              "authors": "yuseonLim",
              "tags": [
                "design"
              ],
              "hide_table_of_contents": false,
              "toc_max_heading_level": 4
            },
            "unlisted": false,
            "nextItem": {
              "title": "2023 회고",
              "permalink": "/blog/2024/02/13/2023-retrospect"
            }
          },
          "content": "## Intro\n\n회사에서 내가 맡은 서비스의 **권한 관리**는 여러 곳에 흩어져 하드코딩 되어 있다. 여기서 권한 관리란 어떤 리소스에 대한 접근 권한을 말한다.\n\n이때 고려되는 요소도 다양하다. 그런데 이번에 새 기능이 추가되어 더욱 더 복잡하게 관리해야 할 상황이 생겼다. REST API도 제공하게 되었다. 이에 권한 관리를 한곳에서 통합해야 할 필요가 생겼고, 이 임무가 나에게(!!) 맡겨졌다.\n\n그래서 설계를 해보며 고려한 요소들과, 이 과정에서 느낀점을 정리해 보려고 한다.\n\n<!-- truncate -->\n\n## 고려해야 할 요소\n\n사내 서비스는 망 분리가 되어 있다. 그래서 사내직원 / 외부유저가 로그인 방식이 다르고, 접근하는 도메인도 다르다. 사내직원일 경우 부서별로 어떤 리소스에 대한 접근 권한이 다르다. 특정 부서가 생성한 것은 그 부서만 수정할 수 있다던가 하는 처리가 필요하다. 외부유저일 경우 같은 회사만 열람할 수 있었다. 이걸 모두 하드코딩 하고 있었다. (if ~ else로.)\n\n또, 일반적인 웹 백엔드 API 말고도 REST API 로의 접근도 제공하게 되었다. 이때 Token을 발급받은 유저만 해당 API 를 사용할 수 있다.\n\n이런 요소들을 고민해야 했다. 정리하면 아래와 같다.\n\n- 사내직원 (Jira API 에서 로그인 정보를 가져옴) / 외부유저 (회원 관리 DB가 따로 있음)\n- 사내직원 일 경우 부서 정보에 따라 접근 권한을 구분해야 함\n- 외부유저일 경우 회사 정보에 따라 접근 권한을 구분해야 함\n\n지금까지 부서별 권한을 나누는 일은 없었으나, 이번에 추가되었다. Jira API는 부서 정보를 한글로 된 String으로 반환했다. 만약 조직 개편이 이루어질 경우 **마이그레이션** 도 고려해야 했다.\n\n## 전략의 선택\n\n보통 권한관리 시에 Spring으로 어플리케이션을 개발하면 Spring Security로 Role을 부여하여 하곤 한다. 하지만 나의 경우 권한 관리가 이루어 지는 곳은 Express 였고, 회원 관련 정보가 우리 DB에 있는 것이 아니라 외부로부터 가져오는 정보이기 때문에 흔하게 적용하는 방법을 쉽게 쓸 수 없었다.\n\n권한관리를 설계할 때 어떤 전략을 취하는지 조사를 해 보았다. `Role Based Access Control (역할 기반 제어)` 와 `Attribute Based Access Control (속성 기반 제어)` 가 가장 많이 취하는 전략이였다.\n\n이 두 전략을 중심으로 설계를 했는데, 리뷰 시간에 PL분께서 인사이트를 제공해 주셔서(!) 해당 리소스별로 권한을 제어하는 방식, 내맘대로 `Resource Based Access Control (리소스 기반 제어)` 라 이름을 짓고, 이 전략도 추가로 설계했다.\n\n아, 추가로 권한을 관리할 수 있는 오픈소스들 (OPA 등 ...) 이 있긴 했는데, 개발자가 나 혼자라 서비스를 하나 더 추가해 관리하는것이 부담스럽고 그렇게 큰 시스템도 아니라서 이건 제외했다.\n\n### Role Based Access Control, 역할 기반 접근 제어\n\n#### 특징\n\n역할에 따라 시스템, 리소스에 대한 사용자 접근 권한을 관리하는 방법이다. 각 개별 사용자에 대해 역할을 부여하고, 어떤 기능에 대해 허용할 역할을 나열해 제어한다.\n\n역할 기반 접근 제어는 다음 특징을 가진다.\n\n- 각 사용자에게는 하나 이상의 역할이 할당된다.\n- 사용자 역할에는 권한이 할당된다.\n- 사용자가 역할을 활성 구성원이 되면 권한에 액세스 할 수 있다.\n\n예를들어, 어떤 상품을 판매하는 페이지라면, `ROLE_ADMIN`, `ROLE_SELLER`, `ROLE_USER`와 같은 역할을 정의하고, 그 역할에 따라 제어하게 된다.\n\n**역할 정의**\n\n```json\n{\n  \"name\": \"roles/testRole\",\n  \"title\": \"billing role\",\n  \"includedPermissions\": [\"paymentStatement.list\", \"usage.list\"]\n}\n```\n\n**역할 부여**\n\n```json\n{\n  \"bindings\": [\n    {\n      \"role\": \"roles/testRole\",\n      \"members\": [\"user:viewrain@hohoho.com\"]\n    }\n  ]\n}\n```\n\n#### 장점\n\n- 권한에 대한 부여, 회수가 간편하다. 특정 권한을 부여하려면 역할을 부여하고, 뺏으려면 역할을 제거하면 된다. 따라서 유연하고 직관적인 통제가 가능하다.\n\n#### 단점\n\n- 역할이 폭발적으로 늘어날 수 있다. 새 기능이 추가되고, 그 기능에만 허용되는 권한이 생긴다면 새로 역할을 정의하고 부여한다. 이런식으로 반복하면 서비스가 커질수록 그 역할도 함께 늘어난다.\n- 세밀한 권한 정책을 부여할 수 없다.\n  - 여러 상황을 추상화해서 역할을 만들지만, 딱 맞는 역할을 정하기가 힘들다. 특정 권한에 대해 많은 고려요소가 있는 경우, 하나만 요소가 바뀌어도 다른 역할을 부여해야 하는데 그렇게 너무 작은 단위로 역할을 나누면 자주 변경하게 될 수 있다.\n\n#### 우리 서비스에는 ...\n\n적용하기 쉽지 않았다. 일단 유저에 대한 DB 정보가 우리한테 있는 것이 아니기 때문에, '회원가입' 이라는 절차가 없어 유저 정보를 기본적으로 가지고 있지 않다.\n\n로그인 한 적 없는 유저가 로그인하면 자동으로 역할을 판단해 부여한다던가 하는 절차가 필요했다.\n\n그리고, 부서별 역할 정의도 필요하고, 회사별 역할 정의도 필요했다. 너무 많은 역할의 정의가 필요했고, 부여하기 위한 별도 로직이 필요했다. 까딱해서 잘못 판단하면 봐야하는 유저가 못보는 정보가 생길 수도 있었다.\n\n이렇게 되니 더욱 복잡해져서 이 전략은 탈락했다.\n\n### Attribute Based Access Control, 속성 기반 접근 제어\n\n#### 특징\n\n주체, 자원 또는 환경의 속성을 기반으로 접근을 제어하는 방식이다. 어떤 사람이 특정 객체에 접근하려 할때 객체의 속성, 사람의 속성, 그때의 환경 정보 등을 다양하게 고려해서 판단한다.\n\n관계는 if ~ then 문으로 정의한다. 예를들면 다음과 같다.\n\n- 직급이 '주임' 이상이고, 접근한 ip주소가 000.000.000.000/ 대역대 이고, 해당 게시물을 작성한 사람이 같은팀 일때 액세스 가능하다.\n- 회사 정책에 \"토요일 휴무\"로 지정되어 있는 경우, 토요일에는 누구도 파일에 액세스할 수 없습니다.\n  이런 정책을 모두 if ~ then 문으로 정의하는 것이다.\n\n나는 '정책' 을 저장할 json array를 정의해 하나의 object에는 리소스의 정보와, 접근하려는 유저의 정보, 최종적으로 그것을 allow 할건지 deny 할건지 결정하는 정보를 적어주었다. 예를 들면 다음과 같다.\n\n```json\n[\n  {\n    \"id\": \"policy_1\",\n    \"description\": \"A 부서가 만든 파일중 aa타입의 파일은 A 부서만 접근할 수 있습니다.\",\n    \"condition\": {\n      \"request\": {\n        \"access\": \"inner\", // 사내직원\n        \"department\": \"A\"\n      },\n      \"resource\": {\n        \"department\": \"A\",\n        \"type\": \"aa\"\n      }\n    },\n    \"action\": \"allow\"\n  }\n  // 생략\n]\n```\n\n이렇게 모든 케이스를 구분해 나열해주는 것이다.\n\n#### 장점\n- 굉장히 세밀한 접근 제어가 가능하다. 거의 모든 경우의 수를 통제할 수 있다.\n- 따라서 표현성, 유연성이 매우 좋다.\n\n#### 단점\n- 시스템 규모가 커지고, 권한에 대한 케이스가 많아질수록 성능 저하가 올 수 있다.\n- 정책을 정의하는 데 많은 시간이 필요하다.\n\n#### 우리 서비스에는 ...\n\n리소스에 대한 종류가 다양해, 많은 케이스의 정의가 필요했다. 그렇게되면 매번 모든 정책을 훑어봐야 했다. 부서만 몇십개고, 회사는 몇천개였어서 그 정책을 다 한번씩 보는 것은 성능에 문제가 있었다.\n\n그리고 개발자가 나뿐이라.. 이걸 정의할 사람도 나였고, 실수하게 되면 치명적인 문제가 발생할 것이기 때문에 결국 이것도 탈락했다.\n\n그리고 조직 개편시 마이그레이션도 정책을 모두 살펴보며 String을 찾고 바꿔줘야 하는데, 정책이 많으면 마이그레이션 할때 신뢰성도 떨어지고 오래걸리기 때문에 이건 탈락했다.\n\n### Resource Based Access Control, 리소스 기반 제어 (내맘대로 명칭)\n\n#### 특징\n\n리소스의 유형을 정의하고, 그것에 대해 특정 유저를 거부할건지 허용할건지 설정해주는 방식이다. 예를 들면 다음과 같다. 회사 정보가 아닌 다른 예시라 조금 엉성할수도 있다 ..\n\n```json\n[\n\t\"post\": {\n\t\t\"a\": {\n\t\t\t\"USER|kildong.hong\": {\n\t\t\t\t\"allow\": [\"read\"],\n\t\t\t\t\"deny\": [\"create\", \"update\", \"delete\"]\n\t\t\t},\n\t\t\t\"GROUP|회계팀\": {\n\t\t\t\t// 생략\n\t\t\t},\n\t\t\t\"ACCESS|사내직원\": {\n\t\t\t\t// 생략\n\t\t\t}\n\t\t}\n\t}\n]\n```\n\n이렇게 리소스의 유형을 정의하고, 해당 리소스에 접근할 수 있는 유저와 그 유저에게 허용된 행위 정보를 적어준다.\n\n- a타입 post에 대해 홍길동 유저는 조회 가능하고, 등록 수정 삭제는 할 수 없다.\n\n와 같이 말이다.\n\n#### 장점\n\n얼핏보면 ABAC와 비슷하다고 생각할 수 있는데, 일단 리소스의 타입별로 나누어 성능엔 조금 더 이점이 있을 수 있다. 그리고 user, group, access와 같이 prefix를 정의하고 설정해 유저의 타입을 구분한다. 한눈에 어떤 유저인지, 어떤 타입의 리소스인지 파악이 가능하다. 나중에 설정을 수정하는 어드민 페이지를 개발한다고 해도 이 편이 더 관리하기 쉬울 것이라 생각했다.\n\n#### 단점\n\n이 경우에도 조직개편시 마이그레이션을 하려면 모든 정책을 한번 다 훑어야 한다.\n\n#### 우리 서비스에는 ...\n\n위 전략들을 모두 살펴보았을 때, 복잡한 우리 서비스의 상황에 가장 알맞다고 생각했다. 유저에 대한 DB정보가 디폴트로 없는 환경에서 유저의 접속 정보와 아이디 등만 보고 판단할 수 있는 가장 좋은 방법이라고 생각했다.\n\n따라서 이 전략을 더욱 더 고도화 해 적용하기로 했다.\n\n## 느낀점\n\n모든 전략을 살펴볼 때, 간단한 샘플 코드를 작성했다. 정책을 정의하고, 그것을 판단하는 코드를 작성해보고, 실제로 호출도 해보았다.\n\n그렇게 해보며 내가 글로 적은 설계와 코드간의 차이가 무엇인지 파악할 수 있었고 실현 가능성을 판단하는 데에도 도움이 되었다. 실제 구현했을때 코드가 예쁘게 짜지는지 알 수 있었다.\n\n시간은 좀 더 걸렸을 지라도, 실제로 적용해야 하는 사안이기 때문에 신중히 결정하려면 필요한 과정이였다고 생각한다.\n\n이 설계를 진행하면서 기술적인 부분 말고도, 커뮤니케이션에 대한 깨달음도 있었다. 나와 PL분 둘이서 설계-리뷰를 진행했다. 리뷰를 진행하고 다시 설계를 보완해 오는 과정에서, 리뷰에서의 PL님의 말씀과 나의 이해가 다른 경우가 있었다. 내가 이해한 줄 알았는데, 아니였던 거다. 이걸 확인하는 과정이 없다면 그걸 바탕으로 설계하고, 다른 것을 다음 리뷰때 확인하기 때문에 시간을 낭비하게 되었다.\n\n한번 그런 뒤로는 리뷰 받은 후 내가 이해한 것이 맞는지 정리해서 한번 확인을 요청드렸다. 이렇게 하니까 나도 더 안심이 되었고 쓸데없는 시간 낭비를 줄일 수 있었다.\n\n이 설계를 경험하면서 시스템에 대한 이해도도 더 높아졌다. 그동안은 뭉뚱그려 알고있었던 것들을 확실히 문서로 적어보면서, 정확하게 파악할 수 있었다. 그리고 하드코딩된 소스들을 살펴보며 버그도 발견할 수 있었다.\n\n팀에 웹개발자가 없어(지금은 나뿐,,) 어려울 때도 있지만, 1년차도 안되었는데 이런 설계도 경험할 수 있는 것은 장점이고, 또 내 의견을 표출해볼 수 있는 것도 장점이다. (시간상 못하는게 더 많지만 ..) 아무튼 좋은 경험이였다. 권한이라 함은 무조건 ROLE_ 이렇게 설정하는 줄 알았는데 새로운 접근 방식을 많이 알게 되었다. 얻어가는 게 꽤 많았던 경험이다.\n\n# 레퍼런스\n\n- https://www.samsungsds.com/kr/insights/cloud_platform_manage.html\n- https://www.okta.com/kr/identity-101/role-based-access-control-vs-attribute-based-access-control/"
        },
        {
          "id": "/2024/02/13/2023-retrospect",
          "metadata": {
            "permalink": "/blog/2024/02/13/2023-retrospect",
            "source": "@site/blog/2024-02-13-2023-retrospect.md",
            "title": "2023 회고",
            "description": "벌써 2월이지만 2023년 회고를 써본다.",
            "date": "2024-02-13T00:00:00.000Z",
            "formattedDate": "February 13, 2024",
            "tags": [
              {
                "label": "retrospect",
                "permalink": "/blog/tags/retrospect"
              }
            ],
            "readingTime": 14.13,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "yuseonLim",
                "title": "BackEnd Engineer",
                "url": "https://github.com/devyuseon",
                "imageURL": "https://avatars.githubusercontent.com/u/67352902?v=4",
                "key": "yuseonLim"
              }
            ],
            "frontMatter": {
              "title": "2023 회고",
              "description": "벌써 2월이지만 2023년 회고를 써본다.",
              "authors": "yuseonLim",
              "tags": [
                "retrospect"
              ],
              "hide_table_of_contents": false,
              "toc_max_heading_level": 4
            },
            "unlisted": false,
            "prevItem": {
              "title": "통합 접근 제어 전략을 설계 해보다.",
              "permalink": "/blog/2024/03/11/design-access-control-strategy"
            },
            "nextItem": {
              "title": "[TroubleShooting] express가 응답을 보내지 않았다. 왜..?",
              "permalink": "/blog/2024/02/04/troubleshooting-express-no-response"
            }
          },
          "content": "![[Pasted image 20240310235945.png]]\n요즘 회사 업무 외에도 개인 공부를 점점 늘려가고 있다. 프로젝트도 새로 시작 하고, 스터디도 참여하며\n바쁜 시간을 보내고 있다. 블로그도 흔한 기술지식 복제 블로그 보다 나만의 생각을 공유하는 공간으로 만들고 싶어\n새로 개설했다. 훗날 내가 바라던 모습이 되어 이때의 나를 다시 복기하기 위해서 2023~2024초 회고를 남긴다.\n\n<!-- truncate -->\n\n## 취업\n\n2023년 상반기, 이제 막 상반기 서류 발표가 될 쯔음에 운좋게 안랩에 합격해 재직중이다.\n\n바랐던 꿈의 회사는 아니지만, 꿈의 장소였던 판교에 어찌저찌 입성하게 되었다. 첫 3달은 OJT 과정을 하면서\n업무에 필요한 지식을 익히는 시간을 가졌다.\n\n### 처음 배운 것들 ..\n\n#### Angular.js\n\n백엔드 개발자여도 프론트 개발은 할 줄 알아야 한다는 생각에, 호기롭게 풀스택 포지션에 지원했다.\nReact나 Vue같은 기술을 배울 줄 알았지만.. Angular.js와 친해져야 했다.\n모든 레퍼런스(스택오버플로우, 심지어는 공식문서, 블로그 등등...)가 2015-2016에 멈춰있었다.\n프론트 개발도 처음이였어서 공부 방법 자체를 잘 몰랐다. 그리고 ~~이미 없어진거나 다름없는~~\nAngular.js와 그다지 친해지고 싶지 않았다. 깊게 알아서 Angular.js 마스터가 되어도\n앞으로 써먹을 일이 크게 없다고 생각했다. 하지만 당장 업무를 해내야 하기 때문에 A to Z로 공부하는 방법이 아니라,\n회사 소스코드를 먼저 보고 거기에 쓰인 기술과 문법을 찾아보는 방식을 선택했다.\n콘솔로그를 이곳 저곳 찍어보며 이 버튼은 어떻게 동작하는지, 이 부분은 언제 렌더링 되는지,\n이걸 눌렀을때 데이터가 어떻게 바뀌는지 하나하나 찾아보았다. 양이 꽤 많았지만, 감사하게도 OJT라는 시간을 주셔서\n코드 전반적으로 거의 한번은 다 보고 업무를 시작할 수 있게 되었다. 그렇게 몇개월동안 프론트 운영 업무도 완벽히 수행해냈다.\n원하던 커리어 방향은 아니지만, 어쨌든 주어진 것을 해낼 수 있는 사람은 된 것 같다.\n\n그리고 지금은 React로 전환 예정에 있어서, 회사에서 React를 공부중이다. 그동안 아무 생각 없이 양방향 데이터 바인딩 방식인\nAngular.js만 써오다가 단방향 방식인 React로 뭘 만들려니 쉽지는 않다.\n\n하지만 하면 할수록 백엔드를 더 열심히 하고 싶다는 생각이 든다... 어쩔 수 없다보다.\n\n#### Node.js, Express\n\nJava와 Spring만 공부해왔던 터라, Node.js와 Express 기반으로\n개발 하는 것은 나름의 도전이였다. Javascript와도 매우 .. 친하지 않아 많이 낯설었다.\npromise라던가, 비동기 라던가,, 이런 개념들을 새로 배울 수 있었다.\nSpring 진영에선 비동기 처리를 위해서 Spring WebFlux나 @Async로 처리를 해줘야 하는 것으로 아는데,\nNode.js 환경에선 그런 추가적인 장치 없이 비동기 프로그래밍이 가능한 것이 매력적인 것 같다.\n아직 모든 것을 다 이해하지는 못했지만 궁금한것을 찾아보며 하나씩 이해중이다.\n싱글스레드 방식이지만 요청이 Blocking I/O(네트워크, 파일)일 경우 별도의 스레드에서 처리하게 된다.\n어떤 서비스이냐에 따라 노드를 채택하는것이 더 좋을 수 있을 것 같다.\n그동안 Spring이 최고! 인줄 알았는데, 노드를 새로 공부하면서 둘의 장단점에 대해 조금은 알게 되었다.\n라고 말하면서.. 개인적으로는 Spring을 공부하고 있다. 아무래도 시장은 아직 Spring 진영인 것 같기 때문이다. 그렇지만 필요할때 언제든 node나 파이썬을 도입해서 써볼 열린 마음은 준비되어 있다. :)\n\n#### Docker\n\n도커도 입사후에 처음 공부했다. 도커는 정의와 개념부터 찬찬히 공부했다. 도커 공부는 공식문서를 가장 많이 참고했다.\n공부 후에는 Docker와 Container란?, Dockerfile, Docker Compose, 이미지 최적화, Volume, 네트워크 등의 주제로 나누어 6개정도 글을 작성했고 이를 발표하는 시간을 가졌다.\n추가적으로 더 다듬어 블로그에도 업로드 했는데, 이 블로그로 시간이 생기면 옮겨올 생각이다.\n회사 프로젝트가 리눅스 기반이라 로컬 환경이 구축되어 있지 않았다. 파일 경로나 명령어 등이 리눅스 기준이여서 로컬에서 개발이 불가능했다. Docker Desktop이 유료화 되어 삭제해달라는 전사 메일을 받아\nWSL로 로컬 개발환경을 구축해 공유했다. RockyLinux 8버전을 쓰고 있는데, 이건 마이크로소프트가 제공해주지 않아 도커 컨테이너에서 추출해야 했다. 이 가이드 문서도 작성해 파트에 공유했다.\n\n아직 완벽히 이해하지 못했지만, Docker와 Docker Swarm, Ansible, Bamboo를 이용한 빌드/배포\n운영은 할 수 있게 되었다. 입사 할 당시엔 빌드 배포 부분이 가장 이해가 안되고 어려웠다. 그래도 흐름정도는 알게 된 것이 올해 가장 큰 수확인 듯 하다.\n\n### 그리고 ..\n\n내 생각과 회사의 방향, 그리고 성향(?)은 많이 달랐다. 여긴 좀 안정적인 느낌이고 내가 그리던 활발한, 서로 함께하고 공유하는 문화를 가진 그런 개발과는 거리가 좀 있는 듯 했다. 내가 맡은 프로젝트는 나 포함 개발자가 두명 뿐이라.. 좋은 시니어들이 많은 회사에 가고싶다는 생각을 했다. 물론 여기도 훌륭한 개발자들이 많다. 그러나 우리 팀은 총 15명인데, 그중 웹개발자는 나포함 두명이다. 회의를 할때나\n기술 공유 세션을 가질때 앉아있기 민망하다는 생각도 가끔 한다. 개발자는 폭넓게 알아야 하지만\n윈도우 개발, 리눅스 커널 개발?, 암호학(??정수론???) 까지는 내가 품을 수 없을 것 같다..\n아무튼 그런 분들이 서로 토론하면서 지식을 나누는 대화를 하는 것을 보면.. 나도 끼고싶다는 생각을 많이 한다. 환경적인것을 탓하는 것은 나쁜 것이지만 그래도 웹개발자가 많은 곳에서 일하면 내가 흡수할 수 있는 지식이 아무래도 많지 않을까? 좋은 코드든 나쁜 코드든 다양한 사람들의 코드도 보고 싶다. 그리고 내가 작성한 코드에 대해 다양한 사람들의 의견도 들어보고 싶다. 이제 다음주부턴 혼자 일하게 된다.. 휴직을 하게 되셔서 혼자가 되었다. 이제 운영업무도 더 늘어날 것 같다. 빨리 할거 다 해버리고 하고싶은거 하게 해달라고 해야지..\n\n회사에서 하는 일이 내가 하고싶은 기술스택과는 상이했고, 내가 바랐던 개발자의 삶이 맞나 싶어서 몇달은 좀 우울해 했었다. 지금은 다 극복하고 오히려 더 열심히 달리는 중이다. 우울해 할 시간이 어디있나.. 공부해야 한다..!! 요즘 개발자의 기준이 점점 상향되고 있는 것을 느낀다. 시간이 갈 수록 더 많이 알아야 되는 것 같다. 다행히도 공부는 즐겁다. 알아가는 즐거움이란 개발자에게 가장 큰 재능(?) 이 아닐까 싶은데, 다행히도 갖춘 듯 하다. 힘든데, 재밌다. 모르는게 많아서 늘 괴롭기도 하다..\n\n일을 하며 더욱 더 알게 된 것인데, 나는 아무래도 관종인 듯 하다. 사람들이 쓰는 것을 개발하는게 좋고,\n세상에 나와있어 이거 내가 개발했어요~ 하는 것이 좋다. 아무래도 사내 서비스다 보니 재미가 좀 떨어진다. 제품 개발을 하는 팀이였으면 좀 더 재밌었을지도 모른다. 집 좀 못가도 그런 개발을 해보고 싶다.\n언젠간 서비스 회사를 가고 싶다. 그게 나에게 더 보람을 가져다 줄 것 같다.\n\n## 졸업\n\n<div style={{textAlign: 'justify', width: '40%'}}>\n\n![](../static/img/post-img/202402140133.jpeg)\n\n</div>\n\n졸업을 했다. 코로나 학번이라 컴퓨터공학과 친구들을 많이 사귀지 못한 것이 아쉽다.. 자율공학부였던 터라, 1학년은 컴공이 아니였기 때문이다. 그럼에도 불구하고 좋은 친구들을 많이 사귀었다. 친구 없다고 생각했는데 이렇게 예쁜 꽃다발을 많이 받은걸 보면 그렇게 잘못 산건 아니였구나 생각이 든다 ㅋㅋ 졸업 유예를 한 상태에서 취업한 터라, 회사를 다니다가 졸업을 하게 되었다. 난 정말 취업하려면 1년 반은 걸릴 줄 알았다.\n\n## 자취\n\n본가는 성북구인지라, 판교는 좀 멀었다. 솔직히 다닐 수는 있었지만 핑계로 자취를 하겠다고 강력하게 주장했고, 정자역 주변에서 자취를 시작하게 되었다. 오래된 아파트이지만 19평이라 비좁거나 하지는 않다. 이번에 이사오면서 M7 스마트모니터도 샀는데, 아주 만족한다. 본가에서는 없었던 나만의 티비가 생겼다. 누워서 OTT 보는 행복이란.. 식탁도 사고 소파도 사고 커튼도 달고, 아주 만족하고 있다. 처음엔 너무 외로워서 힘들었는데 이젠 좀 적응되었다. 청소하는 즐거움도 알게 되었다ㅋㅋ 한번 화장실 청소 시작하면 집착적으로 1시간은 청소한다.\n\n# 끝내며\n\n다시 공부를 시작해 이것저것 열심히 하는 중이다. 회사에서 이룰 수 없다면 개인적으로 공부를 통해서 이것저것 쌓아 나가야 겠다는 생각이다. 물론 회사에서도 집중해서 일을 정확하고 빠르게 끝내고, 내가 개인적으로 하고 싶었던 것들을 하겠다고 도전해볼 생각이다. 회고는 처음 써보는데 이렇게 쓰는게 맞는 지는 모르겠다. 나중에 다시 읽어보려고 한번 써봤다. 그럼 .. 이상 끝."
        },
        {
          "id": "/2024/02/04/troubleshooting-express-no-response",
          "metadata": {
            "permalink": "/blog/2024/02/04/troubleshooting-express-no-response",
            "source": "@site/blog/2024-02-04-troubleshooting-express-no-response.md",
            "title": "[TroubleShooting] express가 응답을 보내지 않았다. 왜..?",
            "description": "에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !",
            "date": "2024-02-04T00:00:00.000Z",
            "formattedDate": "February 4, 2024",
            "tags": [
              {
                "label": "troubleshooting",
                "permalink": "/blog/tags/troubleshooting"
              },
              {
                "label": "express",
                "permalink": "/blog/tags/express"
              },
              {
                "label": "nginx",
                "permalink": "/blog/tags/nginx"
              }
            ],
            "readingTime": 6.91,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "yuseonLim",
                "title": "BackEnd Engineer",
                "url": "https://github.com/devyuseon",
                "imageURL": "https://avatars.githubusercontent.com/u/67352902?v=4",
                "key": "yuseonLim"
              }
            ],
            "frontMatter": {
              "title": "[TroubleShooting] express가 응답을 보내지 않았다. 왜..?",
              "description": "에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !",
              "authors": "yuseonLim",
              "tags": [
                "troubleshooting",
                "express",
                "nginx"
              ],
              "hide_table_of_contents": false
            },
            "unlisted": false,
            "prevItem": {
              "title": "2023 회고",
              "permalink": "/blog/2024/02/13/2023-retrospect"
            },
            "nextItem": {
              "title": "오픈소스 첫 기여 ✨",
              "permalink": "/blog/2024/01/29/first-opensearch-contribute-docker-compose"
            }
          },
          "content": "## 문제 상황\n\n문제 상황이 무엇인지 설명하기 전에, 우리 서비스는 파일을 `등록` 하는 기능이 있고, 똑같은 파일을 중복으로 등록할 수 없다. 중복 등록을 시도할 경우엔 메세지가 뜨며 등록이 안된다.\n\n그런데 사용자로부터 이런 연락을 받았다.\n\n> 파일을 업로드 하고, `등록` 버튼을 눌렀는데 **등록에 실패** 했다는 메시지가 떴습니다.<br/>\n> 그래서 다시 등록을 시도했는데, **중복 등록** 이라고 하며 등록이 되지 않았습니다. <br/>\n> 확인해보니 처음에 등록한 리포트가 잘 등록이 되어 있네요?\n\n그러니까, 실패했다는 메세지가 떴는데 실제론 성공했다는 거다.\n\n<!-- truncate -->\n\n## 증상 파악\n\n![](../static/img/post-img/diagram1.png)\n\n등록 기능 프로세스는 이렇다. express에서 요청을 전달하고, spring에서 등록 과정을 수행하고, 그것을 다시 express에 넘기고, express는 클라이언트에 완료를 전달한다.\n\n로그를 살펴보니, **express가 client로 등록 완료 전달** 하는 부분 외에는 모두 success, 200으로 에러 없이 잘 수행되었다.\n\n![](../static/img/post-img/diagram2.png)\n\n**express가 client로 등록 완료 전달** 하는 부분은 ? 로 남았다. 이런 로그를 발견했기 때문이다.\n\n```\n[시간] \"POST /api/*** HTTP/1.1\" - - \"출처\" \"클라이언트 정보\" - - ms\n```\n\n이 로그는 express의 [morgan](https://expressjs.com/en/resources/middleware/morgan.html) 미들웨어가 남긴 로그이다. 원래라면 아래처럼 응답시간, 응답크기, 걸린시간이 표시 되어야 한다.\n\n```\n[시간] \"POST /api/*** HTTP/1.1\" 200 49 \"출처\" \"클라이언트 정보\" - 317.922 ms\n```\n\n뭔가 응답이 정상적으로 처리되지 않은 듯 했다.\n\n그러나 미스테리인 점은 .. express가 `await` 으로 spring의 응답을 기다리고, 그 뒤에 성공했을땐 로그를 남기게 되어 있는데, 그 로그는 남았다는 것이다.\n\nexpress에 에러는 없었고, spring에도 에러는 없었는데, 클라이언트에 응답 전송만 정상적으로 되지 않았다.\n\n찾아보니, 위 -- 로 처리된 로그는 express가 응답 자체를 하지 않았을 때 일어나는 일이라고 한다.\n\n> https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging > https://github.com/expressjs/morgan/issues/121\n\n위 링크에서 추정한 원인은 다음과 같다.\n\n:::tip[아마도..]\n\nresponse를 보내기 전에 TCP 연결이 끊어진 듯!\n\n:::\n\n로그 시간을 파악해보니 클라이언트 요청 ~ spring의 응답 까지는 1분 5초 내외로 소요되었다.\n\n그렇다면 어디서 TCP 연결을 해제했을까?\n\n## 원인 파악\n\n내가 의심한 것들은 다음과 같다.\n\n- axios timeout\n- node.js timeout\n- OS의 TCP timeout\n- L4 스위치 timeout\n- Nginx timeout\n\n### axios timeout\n\n따로 설정한 것이 없다. [default는 no timeout](https://github.com/axios/axios/blob/main/README.md#request-config) 이다.\n\n### node.js timeout\n\n노드13 버전 이후로는 no timeout이다.\n\n노드8 버전을 쓰는 우리 프로젝트는 120s가 기본으로 설정 되어 있다. (처음알았다 ..)\n\n> https://nodejs.org/api/http.html#servertimeout\n\n그러나 2분 보다 오래 걸리진 않았으므로 이것도 아니다.\n\n### OS의 TCP timeout\n\n```\ncat /proc/sys/net/ipv4/tcp_keepalive_time\n```\n\n- tcp_keepalive : tcp 연결이 되고 나서 얼마나 그 연결을 지속하는지\n\n7200(2시간) 으로 널널했다.\n\n### L4 스위치\n\nL4 에서도 뭔가 타임아웃이 걸려있는것은 아닐까..? 하고 해당 사항을 인프라팀에 문의했는데\n\n아니다. (~의심해서 죄송합니다...~)\n\n전에도 L4 설정 문제때문에 안된 기능이 있어서, 생각났었는데 .. 어쨌든 이게 문제는 아니였다.\n\n### Nginx timeout\n\n```nginx title=\"/etc/nginx/nginx.conf\"\nkeepalive_timeout 65; // default 75\n```\n\n여기였다 !!\n\nkeepalive_timeout이 65초로 설정 되어 있었다. 지금껏 Nginx 설정을 바꿀 일이 없어서 자세히 들여다 보지 않아서 몰랐다.\n\n이 사실을 알고 난 뒤 nginx 에러 로그를 보니 (로그 경로는 nginx.conf 에 있다.)\n\n```text title=\"error.log\"\n[error] upstream timed out (110: Connection timed out) while reading response header from upstream .. 생략\n```\n\nconnection timeout 에러 로그가 찍혔다.\n\nspring이 express로 응답을 보내, express가 client에 응답하기 전에 client와 express간의 연결이 끊어져 client가 응답을 받지 못한 것이다.\n\n## 해결\n\n해결 방법으로는 이런 것들이 있겠다.\n\n- timeout 늘리기\n- upstream인 spring 서버의 처리 성능 향상하기 (best)\n\n그리고 nginx 로그는 도커 컨테이너 안에 있어서, 컨테이너가 내려가면 로그 파일이 날아가 볼 수 없다.\n도커 컨테이너에서 쌓은 로그는 volume으로 연결해 host에도 쌓게 해놨다. nginx 로그도 표준 출력으로 내보내 (/dev/stdout 으로 심볼릭 링크 걸기) 도커가 로그를 수집하게 하거나 nginx 로그를 volume으로 설정해 보관 할 필요가 있다.\n\n일단 timeout을 늘려서 급한 불을 끄고, spring 서버의 처리 성능을 높일 방법을 생각 해 볼 것이다.\n\n적고보니 별일 아닌 듯 하지만,, 의미 있었던 과정이였다.\n\n이 이슈로 인해 우리 서비스의 어떤 부분에 timeout이 얼만큼 걸려있는지 확인 할 수 있었고, 로그도 좀 더 보충할 수 있었다. 다음에 이러한 일이 발생하면 이 경험으로 인해 원인 파악을 조금은 빨리 할 수 있을까 기대해보며 글을 마친다."
        },
        {
          "id": "/2024/01/29/first-opensearch-contribute-docker-compose",
          "metadata": {
            "permalink": "/blog/2024/01/29/first-opensearch-contribute-docker-compose",
            "source": "@site/blog/2024-01-29-first-opensearch-contribute-docker-compose.md",
            "title": "오픈소스 첫 기여 ✨",
            "description": "에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !",
            "date": "2024-01-29T00:00:00.000Z",
            "formattedDate": "January 29, 2024",
            "tags": [
              {
                "label": "docker",
                "permalink": "/blog/tags/docker"
              },
              {
                "label": "opensource-contributions",
                "permalink": "/blog/tags/opensource-contributions"
              }
            ],
            "readingTime": 1.925,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "yuseonLim",
                "title": "BackEnd Engineer",
                "url": "https://github.com/devyuseon",
                "imageURL": "https://avatars.githubusercontent.com/u/67352902?v=4",
                "key": "yuseonLim"
              }
            ],
            "frontMatter": {
              "title": "오픈소스 첫 기여 ✨",
              "description": "에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !",
              "authors": "yuseonLim",
              "tags": [
                "docker",
                "opensource-contributions"
              ],
              "hide_table_of_contents": false
            },
            "unlisted": false,
            "prevItem": {
              "title": "[TroubleShooting] express가 응답을 보내지 않았다. 왜..?",
              "permalink": "/blog/2024/02/04/troubleshooting-express-no-response"
            },
            "nextItem": {
              "title": "[Java] 에러 메시지, Stacktrace가 생략되는 문제",
              "permalink": "/blog/2024/01/02/java-no-stacktrace"
            }
          },
          "content": "비록 공식문서의 오류를 고치는 일이였지만,\n\n처음으로 오픈소스에 기여했고 무려 Docker 문서 이다!!\n\n머지 되었을때는 정말 뿌듯했고 이슈를 생성하고 PR을 날리는 과정도 재밌었다.\n\n<!-- truncate -->\n\n## 문제 발견, 이슈 생성\n\n![](../static/img/post-img/20240205204509.png)\n\n문서에 틀린 부분을 발견하고, 이슈를 생성했다.\n\n수정이 필요한게 맞다면 내가 작업해도 되는지 물어봤다.\n\n![](../static/img/post-img/20240205204536.png)\n\nassgin 해주셨고, 문서 위치가 바뀌었으니 compose-spec 레포지토리에서 PR을 해달라는 친절한 가이드까지 주셨다.\n\n## Pull Request 생성하기\n\n먼저 compose-spec을 fork하고, 소스코드 수정 후 commit 했다.\n\n![](../static/img/post-img/20240205204610.png)\n\n다시 upstream으로 와서 pull request를 생성했다.\n\n![](../static/img/post-img/20240205204624.png)\n\n이건 내가 CONTRIBUTING.md를 꼼꼼히 보지 않아 생긴 일이다. ㅜㅜ\n\n그냥 커밋할때 계정 정보를 확인해달라는 말인 줄 알았는데,\n\n커밋 메세지에 sign-off를 포함하지 않으면 DCO check에 실패 하면서 오류가 난다.\n\n친절히 알려주셔서 커밋 메세지 수정 후 강제 푸시했고,\n\n이후 빌드에 한 번 실패해 한가지 수정을 더 하고 머지되었다.\n\n![](../static/img/post-img/20240205204639.png)\n\n![](../static/img/post-img/20240205204646.png)\n\n이렇게 오픈소스 기여에 작지만 위대한 첫 걸음을 내딛었다.\n\n앞으로도 문서 뿐만 아니라 코드 레벨까지 .. 더 많은 오픈소스에 기여할 수 있게 되면 좋겠다."
        },
        {
          "id": "/2024/01/02/java-no-stacktrace",
          "metadata": {
            "permalink": "/blog/2024/01/02/java-no-stacktrace",
            "source": "@site/blog/2024-01-02-java-no-stacktrace.md",
            "title": "[Java] 에러 메시지, Stacktrace가 생략되는 문제",
            "description": "NullPointerException의 에러 메시지가 빈 채로 출력된다",
            "date": "2024-01-02T00:00:00.000Z",
            "formattedDate": "January 2, 2024",
            "tags": [
              {
                "label": "java",
                "permalink": "/blog/tags/java"
              }
            ],
            "readingTime": 4.155,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "yuseonLim",
                "title": "BackEnd Engineer",
                "url": "https://github.com/devyuseon",
                "imageURL": "https://avatars.githubusercontent.com/u/67352902?v=4",
                "key": "yuseonLim"
              }
            ],
            "frontMatter": {
              "title": "[Java] 에러 메시지, Stacktrace가 생략되는 문제",
              "description": "NullPointerException의 에러 메시지가 빈 채로 출력된다",
              "authors": "yuseonLim",
              "tags": [
                "java"
              ]
            },
            "unlisted": false,
            "prevItem": {
              "title": "오픈소스 첫 기여 ✨",
              "permalink": "/blog/2024/01/29/first-opensearch-contribute-docker-compose"
            }
          },
          "content": "## 문제 상황\n\n테스트 스크립트를 배포시에 실행하게 되어 있는데, 해당 스클립트는 같은 api를 여러 case로 몇십번 호출한다.\n\n최초 실행시에는 성공하고,\n\n두번째 이후부턴 실패한다.\n\n<!-- truncate -->\n\n지금까지는 서비스 실행시 한번만 실행했어서 발견을 못 한 문제였다.\n\n에러가 발생한 지점은 여기였다.\n\n```java\ncatch (Exception e) {\n    String msg = e.getMessage(); // errMsg: null\n    if (msg.equalsIgnoreCase(\"XXX\")) { // NullPointerException 발생!\n        //\n    }\n}\n```\n\ntry ~ catch 문에서 에러 메세지를 가져와 어떤 에러 메시지인지 판단하려고 할 때, `e.getMessage()` 결과가 **null** 이 되어 catch 구문에서 다시 에러가 발생하는 것이였다.\n\n로직을 살펴보니 특정 case엔 무조건 try쪽에서 NPE가 발생하고, catch문으로 들어오게 되어있었다.\n\n근데 왜 최초 실행시엔 msg가 null이 아닌가..???!!!\n\n해당 현상을 재현한 뒤에 최초 실행 / 이후 실행에 대한 에러를 출력해 보았다.\n\n**최초**\n\n```\nclass java.lang.NullPointerException: Cannot invoke \"Object.toString()\" because of \"java.util.Map.get(Object) is null\n// 굉장히 긴 StackTrace\n```\n\n**두번째~**\n\n```java\nclass java.lang.NullPointerException: null\n```\n\n나는 내가 로직 어딘가에 NPE가 발생하는 원인을 놓친줄 알고 며칠을 삽질했는데, 스택오버플로우에서 이 글을 발견했다.\n\n> https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace\n\n관련해서 간략하게 조사해 보았다.\n\n## JVM Stacktrace 생략\n\n[JDK5 릴리즈 노트](https://www.oracle.com/java/technologies/javase/release-notes-introduction.html)를 보면 Exception이 반복적으로 발생할 때, 컴파일러는 StackTrace를 출력하는것을 멈춘다고 한다.\n\n이것은 JVM의 JIT컴파일러의 C2컴파일러의 기본 최적화 옵션 이라고 한다.\n\n[OpenJDK의 소스 코드](https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L528)를 보면 다음 다섯가지 Exception에 대해 최적화 옵션이 적용된다.\n\n:::info\n\n**Stacktrace 생략 최적화 옵션 적용되는 Exception**\n\n- NullPointerException\n- ArithmeticException\n- ArrayIndexOutOfBoundsException\n- ClassCastException\n- ArrayStoreException\n\n:::\n\n![](../static/img/post-img/20240205210954.png)\n\n최적화 옵션을 비활성화 하려면 아래 JVM 옵션을 추가해 주면 된다.\n\n```\n-XX:-OmitStackTraceInFastThrow\n```\n\n하지만 이는 성능 최적화를 위한 옵션으로, 해당 Exception이 반복적으로 일어나지 않게끔 처리 하는것이 올바른 방향 일 것이다.\n\nException 처리에 대한 최적화를 하는 이유가 궁금해서 찾아보았다.\n\nJava에서 Exception을 던지는 비용은 꽤 비싸다고 한다. Exception이 발생하면 해당 예외가 어디서 발생했는지 추적하며 정보를 수집하고 Stack Trace를 생성한다. 이를 계산하는데에도 시간이 꽤 걸린.\n\n또, 예외 객체를 새로 생성하고 초기화 하는 과정이 반복되기 때문에 좋지 않다. 그리고 Exception이 발생하면 그것이 어떤 예외인지 적절한 예외 핸들러를 찾아 리턴해줘야 하는데, 예외 핸들러를 찾는 과정 또한 오래 걸린다.\n\n프로젝트를 할 때도, 적절한 예외 상황에 Custom Exception을 던지곤 했는데, 이게 맞는 방법인지 생각해볼 필요가 있는 듯 하다.\n\n그리고 스택 추적이 필요하지 않은 경우라면 override를 통해 trace를 담지 않도록 하는 방법도 좋겠다."
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "/2024/03/11/design-access-control-strategy",
            "/2024/02/13/2023-retrospect",
            "/2024/02/04/troubleshooting-express-no-response",
            "/2024/01/29/first-opensearch-contribute-docker-compose",
            "/2024/01/02/java-no-stacktrace"
          ],
          "metadata": {
            "permalink": "/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 5,
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        }
      ],
      "blogTags": {
        "/blog/tags/design": {
          "label": "design",
          "items": [
            "/2024/03/11/design-access-control-strategy"
          ],
          "permalink": "/blog/tags/design",
          "pages": [
            {
              "items": [
                "/2024/03/11/design-access-control-strategy"
              ],
              "metadata": {
                "permalink": "/blog/tags/design",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/retrospect": {
          "label": "retrospect",
          "items": [
            "/2024/02/13/2023-retrospect"
          ],
          "permalink": "/blog/tags/retrospect",
          "pages": [
            {
              "items": [
                "/2024/02/13/2023-retrospect"
              ],
              "metadata": {
                "permalink": "/blog/tags/retrospect",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/troubleshooting": {
          "label": "troubleshooting",
          "items": [
            "/2024/02/04/troubleshooting-express-no-response"
          ],
          "permalink": "/blog/tags/troubleshooting",
          "pages": [
            {
              "items": [
                "/2024/02/04/troubleshooting-express-no-response"
              ],
              "metadata": {
                "permalink": "/blog/tags/troubleshooting",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/express": {
          "label": "express",
          "items": [
            "/2024/02/04/troubleshooting-express-no-response"
          ],
          "permalink": "/blog/tags/express",
          "pages": [
            {
              "items": [
                "/2024/02/04/troubleshooting-express-no-response"
              ],
              "metadata": {
                "permalink": "/blog/tags/express",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/nginx": {
          "label": "nginx",
          "items": [
            "/2024/02/04/troubleshooting-express-no-response"
          ],
          "permalink": "/blog/tags/nginx",
          "pages": [
            {
              "items": [
                "/2024/02/04/troubleshooting-express-no-response"
              ],
              "metadata": {
                "permalink": "/blog/tags/nginx",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/docker": {
          "label": "docker",
          "items": [
            "/2024/01/29/first-opensearch-contribute-docker-compose"
          ],
          "permalink": "/blog/tags/docker",
          "pages": [
            {
              "items": [
                "/2024/01/29/first-opensearch-contribute-docker-compose"
              ],
              "metadata": {
                "permalink": "/blog/tags/docker",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/opensource-contributions": {
          "label": "opensource-contributions",
          "items": [
            "/2024/01/29/first-opensearch-contribute-docker-compose"
          ],
          "permalink": "/blog/tags/opensource-contributions",
          "pages": [
            {
              "items": [
                "/2024/01/29/first-opensearch-contribute-docker-compose"
              ],
              "metadata": {
                "permalink": "/blog/tags/opensource-contributions",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        },
        "/blog/tags/java": {
          "label": "java",
          "items": [
            "/2024/01/02/java-no-stacktrace"
          ],
          "permalink": "/blog/tags/java",
          "pages": [
            {
              "items": [
                "/2024/01/02/java-no-stacktrace"
              ],
              "metadata": {
                "permalink": "/blog/tags/java",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ],
          "unlisted": false
        }
      },
      "blogTagsListPath": "/blog/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        },
        "unlisted": false
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-plugin-google-gtag": {},
  "docusaurus-theme-classic": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}